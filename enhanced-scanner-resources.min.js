/**
 * Enhanced Scanner Resources v2.1
 * External resource loading and management
 */
(function() {
    'use strict';
    
    window.ScannerResources = {
        config: {
            resources: {
                jquery: {
                    url: "https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=677c70d437d84025e9c2d9aa",
                    integrity: "sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=",
                    global: 'jQuery',
                    priority: 1
                },
                accessibe: {
                    url: "//acsbapp.com/apps/app/dist/js/app.js",
                    params: { locale: 'sv' },
                    global: 'acsb',
                    priority: 2
                },
                hubspot: {
                    url: "//js-eu1.hs-scripts.com/145237655.js",
                    global: '_hsq',
                    priority: 3
                },
                gtm: {
                    url: "https://www.googletagmanager.com/gtm.js",
                    params: { id: 'GTM-PQBPSGHR' },
                    global: 'dataLayer',
                    priority: 4
                },
                linkedin: {
                    url: "https://snap.licdn.com/li.lms-analytics/insight.min.js",
                    global: 'lintrk',
                    priority: 5
                },
                searchatlas: {
                    url: "https://dashboard.searchatlas.com/scripts/dynamic_optimization.js",
                    params: { uuid: 'ab3d6ac8-4a01-472e-9ade-47b405ee9b48' },
                    global: 'searchatlas',
                    priority: 6
                }
            },
            loadTimeout: 15000,
            retryAttempts: 2,
            retryDelay: 2000
        },
        
        resourceStatus: {
            jquery: { loaded: false, blocked: false, loading: false, attempts: 0 },
            accessibe: { loaded: false, blocked: false, loading: false, attempts: 0 },
            hubspot: { loaded: false, blocked: false, loading: false, attempts: 0 },
            gtm: { loaded: false, blocked: false, loading: false, attempts: 0 },
            linkedin: { loaded: false, blocked: false, loading: false, attempts: 0 },
            searchatlas: { loaded: false, blocked: false, loading: false, attempts: 0 }
        },
        
        loadQueue: [],
        loadedResources: new Set(),
        failedResources: new Set(),
        
        init: function() {
            console.log("Scanner Resources v2.1 initializing...");
            
            if (window._scannerResourcesInitialized) {
                console.log("Scanner Resources already initialized");
                return;
            }
            window._scannerResourcesInitialized = true;
            
            this.detectExistingResources();
            this.loadCriticalResources();
            this.setupDNSPrefetch();
            
            console.log("Scanner Resources initialized successfully");
        },
        
        // Detect what's already loaded
        detectExistingResources: function() {
            // Check jQuery
            if (typeof window.jQuery !== 'undefined') {
                this.resourceStatus.jquery.loaded = true;
                this.loadedResources.add('jquery');
                console.log("jQuery already available");
            }
            
            // Check AccessiBe
            if (typeof window.acsb !== 'undefined' || document.querySelector('script[src*="acsbapp.com"]')) {
                this.resourceStatus.accessibe.loaded = true;
                this.loadedResources.add('accessibe');
                console.log("AccessiBe already available");
            }
            
            // Check HubSpot
            if (typeof window._hsq !== 'undefined' || window.hsConversationsAPI || document.querySelector('script[src*="hs-scripts.com"]')) {
                this.resourceStatus.hubspot.loaded = true;
                this.loadedResources.add('hubspot');
                console.log("HubSpot already available");
            }
            
            // Check GTM
            if (window.dataLayer || window.gtag || document.querySelector('script[src*="googletagmanager.com"]')) {
                this.resourceStatus.gtm.loaded = true;
                this.loadedResources.add('gtm');
                console.log("GTM already available");
            }
            
            // Check LinkedIn
            if (window.lintrk || document.querySelector('script[src*="licdn.com"]')) {
                this.resourceStatus.linkedin.loaded = true;
                this.loadedResources.add('linkedin');
                console.log("LinkedIn already available");
            }
            
            // Check SearchAtlas
            if (document.getElementById("sa-dynamic-optimization-loader")) {
                this.resourceStatus.searchatlas.loaded = true;
                this.loadedResources.add('searchatlas');
                console.log("SearchAtlas already available");
            }
        },
        
        // Load critical resources immediately
        loadCriticalResources: function() {
            // Load jQuery first (many things depend on it)
            if (!this.resourceStatus.jquery.loaded) {
                this.loadResource('jquery');
            }
            
            // Load AccessiBe with locale support
            if (!this.resourceStatus.accessibe.loaded) {
                this.loadAccessiBeWidget();
            }
            
            // Load other resources based on page requirements
            this.loadConditionalResources();
        },
        
        loadConditionalResources: function() {
            // Load HubSpot if forms are present
            const hasForms = document.querySelector('form');
            if (hasForms && !this.resourceStatus.hubspot.loaded) {
                this.loadResource('hubspot');
            }
            
            // Load GTM and other tracking if needed
            const needsTracking = document.querySelector('[data-track]') || 
                                 window.location.search.includes('utm_') ||
                                 document.querySelector('[data-partner-id]');
            if (needsTracking && !this.resourceStatus.gtm.loaded) {
                this.loadGTM();
            }
            
            // Load LinkedIn and SearchAtlas
            if (!this.resourceStatus.linkedin.loaded) {
                this.loadResource('linkedin');
            }
            if (!this.resourceStatus.searchatlas.loaded) {
                this.loadResource('searchatlas');
            }
        },
        
        // Generic resource loader
        loadResource: function(resourceName, callback) {
            const resource = this.config.resources[resourceName];
            const status = this.resourceStatus[resourceName];
            
            if (!resource) {
                console.error("Unknown resource:", resourceName);
                return Promise.reject(new Error(`Unknown resource: ${resourceName}`));
            }
            
            if (status.loaded) {
                console.log(`${resourceName} already loaded`);
                callback && callback();
                return Promise.resolve();
            }
            
            if (status.loading) {
                console.log(`${resourceName} already loading`);
                return new Promise((resolve) => {
                    const checkLoaded = setInterval(() => {
                        if (status.loaded || status.blocked) {
                            clearInterval(checkLoaded);
                            resolve();
                        }
                    }, 100);
                });
            }
            
            status.loading = true;
            status.attempts++;
            
            console.log(`Loading ${resourceName}...`);
            
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.async = true;
                script.defer = true;
                
                // Build URL with parameters
                let url = resource.url;
                if (resource.params) {
                    const params = new URLSearchParams(resource.params);
                    url += (url.includes('?') ? '&' : '?') + params.toString();
                }
                script.src = url;
                
                // Add integrity if available
                if (resource.integrity) {
                    script.integrity = resource.integrity;
                    script.crossOrigin = 'anonymous';
                }
                
                // Timeout handler
                const timeout = setTimeout(() => {
                    this.handleResourceError(resourceName, 'timeout', resolve, reject);
                }, this.config.loadTimeout);
                
                script.onload = () => {
                    clearTimeout(timeout);
                    status.loaded = true;
                    status.loading = false;
                    this.loadedResources.add(resourceName);
                    
                    console.log(`${resourceName} loaded successfully`);
                    callback && callback();
                    resolve();
                    
                    // Notify other modules
                    this.notifyResourceLoaded(resourceName);
                };
                
                script.onerror = () => {
                    clearTimeout(timeout);
                    this.handleResourceError(resourceName, 'error', resolve, reject);
                };
                
                // Add to document
                const insertPoint = document.getElementsByTagName('script')[0] || document.head;
                insertPoint.parentNode.insertBefore(script, insertPoint);
            });
        },
        
        handleResourceError: function(resourceName, errorType, resolve, reject) {
            const status = this.resourceStatus[resourceName];
            status.loading = false;
            
            console.warn(`Failed to load ${resourceName}:`, errorType);
            
            // Retry logic
            if (status.attempts < this.config.retryAttempts) {
                console.log(`Retrying ${resourceName} in ${this.config.retryDelay}ms...`);
                setTimeout(() => {
                    this.loadResource(resourceName).then(resolve).catch(reject);
                }, this.config.retryDelay);
            } else {
                status.blocked = true;
                this.failedResources.add(resourceName);
                console.error(`${resourceName} failed to load after ${status.attempts} attempts`);
                
                // Resolve anyway to not block other resources
                resolve();
            }
        },
        
        // Specialized AccessiBe loader
        loadAccessiBeWidget: function() {
            if (this.resourceStatus.accessibe.loaded || this.resourceStatus.accessibe.loading) {
                return;
            }
            
            try {
                // Set locale before loading
                window.localStorage.setItem('acsb-locale', 'sv');
                
                const script = document.createElement('script');
                script.async = true;
                script.defer = true;
                script.src = `${this.config.resources.accessibe.url}?locale=sv`;
                
                script.addEventListener('load', () => {
                    this.resourceStatus.accessibe.loaded = true;
                    this.loadedResources.add('accessibe');
                    console.log("AccessiBe widget loaded with Swedish locale");
                    
                    // Configure AccessiBe if available
                    if (window.acsb) {
                        this.configureAccessiBe();
                    }
                });
                
                script.addEventListener('error', () => {
                    this.resourceStatus.accessibe.blocked = true;
                    this.failedResources.add('accessibe');
                    console.warn("AccessiBe widget failed to load");
                });
                
                document.head.appendChild(script);
                this.resourceStatus.accessibe.loading = true;
                
            } catch (error) {
                this.resourceStatus.accessibe.blocked = true;
                console.error("Error loading AccessiBe widget:", error);
            }
        },
        
        configureAccessiBe: function() {
            if (window.acsb && typeof window.acsb.configure === 'function') {
                window.acsb.configure({
                    position: 'bottom-right',
                    language: 'sv',
                    trigger: {
                        tooltipText: 'Tillgänglighetsmenyn',
                        buttonText: 'Tillgänglighet'
                    }
                });
                console.log("AccessiBe configured for Swedish");
            }
        },
        
        // Specialized GTM loader
        loadGTM: function() {
            if (this.resourceStatus.gtm.loaded || this.resourceStatus.gtm.loading) {
                return;
            }
            
            try {
                // Initialize dataLayer if not exists
                window.dataLayer = window.dataLayer || [];
                
                // GTM initialization function
                function gtag() { dataLayer.push(arguments); }
                window.gtag = gtag;
                gtag('js', new Date());
                gtag('config', 'GTM-PQBPSGHR');
                
                const script = document.createElement('script');
                script.async = true;
                script.src = `${this.config.resources.gtm.url}?id=GTM-PQBPSGHR`;
                
                script.addEventListener('load', () => {
                    this.resourceStatus.gtm.loaded = true;
                    this.loadedResources.add('gtm');
                    console.log("GTM loaded successfully");
                });
                
                script.addEventListener('error', () => {
                    this.resourceStatus.gtm.blocked = true;
                    this.failedResources.add('gtm');
                    console.warn("GTM failed to load");
                });
                
                document.head.appendChild(script);
                this.resourceStatus.gtm.loading = true;
                
            } catch (error) {
                this.resourceStatus.gtm.blocked = true;
                console.error("Error loading GTM:", error);
            }
        },
        
        // DNS prefetching for performance
        setupDNSPrefetch: function() {
            const domains = [
                '//cdn.acsbapp.com',
                '//www.googletagmanager.com', 
                '//js-eu1.hs-scripts.com',
                '//snap.licdn.com',
                '//platform.linkedin.com',
                '//connect.facebook.net',
                '//dashboard.searchatlas.com'
            ];
            
            domains.forEach(domain => {
                if (!document.querySelector(`link[href="${domain}"]`)) {
                    const link = document.createElement('link');
                    link.rel = 'dns-prefetch';
                    link.href = domain;
                    document.head.appendChild(link);
                }
            });
            
            console.log("DNS prefetch setup complete");
        },
        
        // Resource availability checks
        isResourceAvailable: function(resourceName) {
            return this.resourceStatus[resourceName]?.loaded || false;
        },
        
        isResourceBlocked: function(resourceName) {
            return this.resourceStatus[resourceName]?.blocked || false;
        },
        
        waitForResource: function(resourceName, timeout = 10000) {
            return new Promise((resolve, reject) => {
                if (this.isResourceAvailable(resourceName)) {
                    resolve();
                    return;
                }
                
                if (this.isResourceBlocked(resourceName)) {
                    reject(new Error(`Resource ${resourceName} is blocked`));
                    return;
                }
                
                const startTime = Date.now();
                const checkInterval = setInterval(() => {
                    if (this.isResourceAvailable(resourceName)) {
                        clearInterval(checkInterval);
                        resolve();
                    } else if (this.isResourceBlocked(resourceName) || (Date.now() - startTime) > timeout) {
                        clearInterval(checkInterval);
                        reject(new Error(`Timeout waiting for ${resourceName}`));
                    }
                }, 100);
            });
        },
        
        // Notification system for other modules
        notifyResourceLoaded: function(resourceName) {
            // Notify tracking module
            if (resourceName === 'gtm' && window.ScannerTracking && typeof window.ScannerTracking.onGTMReady === 'function') {
                window.ScannerTracking.onGTMReady();
            }
            
            // Notify core module
            if (window.EnhancedScanner && typeof window.EnhancedScanner.onResourceLoaded === 'function') {
                window.EnhancedScanner.onResourceLoaded(resourceName);
            }
            
            // Custom event
            window.dispatchEvent(new CustomEvent('scannerResourceLoaded', {
                detail: { resourceName, timestamp: Date.now() }
            }));
        },
        
        // Public API
        loadSpecificResource: function(resourceName) {
            return this.loadResource(resourceName);
        },
        
        getResourceStatus: function(resourceName) {
            if (resourceName) {
                return this.resourceStatus[resourceName] || null;
            }
            return this.resourceStatus;
        },
        
        getLoadedResources: function() {
            return Array.from(this.loadedResources);
        },
        
        getFailedResources: function() {
            return Array.from(this.failedResources);
        },
        
        // Utility functions
        executeWhenReady: function(resourceName, callback) {
            if (this.isResourceAvailable(resourceName)) {
                callback();
            } else {
                this.waitForResource(resourceName, 15000)
                    .then(callback)
                    .catch(error => {
                        console.warn(`Cannot execute callback for ${resourceName}:`, error);
                    });
            }
        },
        
        executeWithFallback: function(resourceName, primaryCallback, fallbackCallback) {
            if (this.isResourceAvailable(resourceName)) {
                primaryCallback();
            } else if (this.isResourceBlocked(resourceName)) {
                fallbackCallback && fallbackCallback();
            } else {
                this.waitForResource(resourceName, 5000)
                    .then(primaryCallback)
                    .catch(() => {
                        console.log(`Resource ${resourceName} not available, using fallback`);
                        fallbackCallback && fallbackCallback();
                    });
            }
        },
        
        // Debug and monitoring
        getLoadingSummary: function() {
            const summary = {
                loaded: this.getLoadedResources(),
                failed: this.getFailedResources(),
                loading: [],
                pending: []
            };
            
            Object.keys(this.resourceStatus).forEach(resourceName => {
                const status = this.resourceStatus[resourceName];
                if (status.loading) {
                    summary.loading.push(resourceName);
                } else if (!status.loaded && !status.blocked) {
                    summary.pending.push(resourceName);
                }
            });
            
            return summary;
        },
        
        // Performance monitoring
        getPerformanceMetrics: function() {
            const metrics = {
                resourceCounts: {
                    total: Object.keys(this.resourceStatus).length,
                    loaded: this.loadedResources.size,
                    failed: this.failedResources.size,
                    success_rate: this.loadedResources.size / Object.keys(this.resourceStatus).length
                },
                loadTimes: {}
            };
            
            // Add performance timing if available
            if (window.performance && window.performance.getEntriesByType) {
                const resourceEntries = window.performance.getEntriesByType('resource');
                Object.keys(this.config.resources).forEach(resourceName => {
                    const resource = this.config.resources[resourceName];
                    const entry = resourceEntries.find(e => e.name.includes(resource.url.split('//')[1]?.split('/')[0]));
                    if (entry) {
                        metrics.loadTimes[resourceName] = {
                            duration: Math.round(entry.duration),
                            size: entry.transferSize || 0
                        };
                    }
                });
            }
            
            return metrics;
        }
    };
    
    // Auto-initialize
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.ScannerResources.init();
        });
    } else {
        window.ScannerResources.init();
    }
    
    // Debug utilities
    window.scannerDebug = {
        resources: () => window.ScannerResources.getLoadingSummary(),
        performance: () => window.ScannerResources.getPerformanceMetrics(),
        reload: (resourceName) => {
            if (resourceName) {
                window.ScannerResources.resourceStatus[resourceName] = { loaded: false, blocked: false, loading: false, attempts: 0 };
                return window.ScannerResources.loadResource(resourceName);
            }
        }
    };
    
})();
