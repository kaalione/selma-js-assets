/**
 * Enhanced Scanner Core v3.5
 * Core scanning functionality with deep analysis and minimizable CTA
 */
(function() {
    'use strict';
    
    if (window.EnhancedScanner) return;
    
    window.EnhancedScanner = {
        config: {
            partnerId: "66f5d0180130eb9ebefb1233",
            aceUrl: "https://acsbace.com",
            webhookUrl: "https://hook.eu2.make.com/h1559o76njvrl2wc3whcg9w3cdb511qq",
            brandId: "68ba8982b6389e56a246d8f6",
            locale: "sv",
            enableWhitelabel: true,
            enableCTAOverlay: true,
            contactPopupTiming: "onReportAnalysis",
            debugMode: true,
            webhookDelay: 15000,
            maxWebhookWait: 30000,
            reportAnalysisDelay: 3000,
            reportWaitTime: 15000
        },
        
        session: {
            guid: null,
            domain: null,
            reportUrl: null,
            whitelabelReportUrl: null,
            brandedReportUrl: null,
            reportId: null,
            contactInfo: { email: null, phone: null, name: null },
            scanState: "initiated",
            formType: null,
            webhookSent: false,
            finalWebhookSent: false,
            complianceStatus: null,
            timestamp: null,
            webhookTimer: null,
            reportCheckInterval: null,
            maxWaitTimer: null,
            issuesCount: 0,
            formId: null,
            reportLoaded: false,
            reportAnalyzed: false,
            ctaMinimized: false,
            trafficSource: {
                utm_source: null,
                utm_medium: null,
                utm_campaign: null,
                utm_content: null,
                utm_term: null,
                referrer: null,
                landingPage: null,
                source_type: null,
                source: null,
                medium: null,
                campaign: null,
                utmParams: {}
            }
        },
        
        webhookQueue: new Set(),
        partnerId: null,
        sessionId: null,
        
        init: function() {
            console.log("Enhanced Scanner Core v3.5 initializing...");
            
            if (window._scannerCoreInitialized) {
                console.log("Scanner core already initialized");
                return;
            }
            
            try {
                window._scannerCoreInitialized = true;
                window._scannerModalActive = false;
                
                // Wrap each initialization step in try-catch
                try {
                    this.detectTrafficSource();
                } catch (e) {
                    console.warn("Traffic source detection failed:", e);
                }
                
                try {
                    this.initPartnerTracking();
                } catch (e) {
                    console.warn("Partner tracking init failed:", e);
                }
                
                try {
                    this.setupMessageListeners();
                } catch (e) {
                    console.warn("Message listeners setup failed:", e);
                }
                
                try {
                    this.findAndEnhanceForms();
                } catch (e) {
                    console.warn("Form enhancement failed:", e);
                }
                
                try {
                    this.enableSubmitButtons();
                } catch (e) {
                    console.warn("Submit button enablement failed:", e);
                }
                
                try {
                    this.observeForNewForms();
                } catch (e) {
                    console.warn("Form observer setup failed:", e);
                }
                
                try {
                    this.preventModalBypass();
                } catch (e) {
                    console.warn("Modal bypass prevention failed:", e);
                }
                
                // Initialize other modules if available
                try {
                    if (window.ScannerUI && typeof window.ScannerUI.init === 'function') {
                        window.ScannerUI.init();
                    }
                } catch (e) {
                    console.warn("ScannerUI init failed:", e);
                }
                
                try {
                    if (window.ScannerTracking && typeof window.ScannerTracking.init === 'function') {
                        window.ScannerTracking.init();
                    }
                } catch (e) {
                    console.warn("ScannerTracking init failed:", e);
                }
                
                try {
                    if (window.ScannerResources && typeof window.ScannerResources.init === 'function') {
                        window.ScannerResources.init();
                    }
                } catch (e) {
                    console.warn("ScannerResources init failed:", e);
                }
                
                console.log("Enhanced Scanner Core initialized successfully");
                
            } catch (error) {
                console.error("Critical error during scanner initialization:", error);
                window._scannerCoreInitialized = false;
                throw error;
            }
        },
        
        detectTrafficSource: function() {
            const urlParams = new URLSearchParams(window.location.search);
            const referrer = document.referrer;
            
            // Store UTM parameters
            this.session.trafficSource.utmParams = {
                utm_source: urlParams.get("utm_source"),
                utm_medium: urlParams.get("utm_medium"),
                utm_campaign: urlParams.get("utm_campaign"),
                utm_term: urlParams.get("utm_term"),
                utm_content: urlParams.get("utm_content")
            };
            
            // Store all UTM parameters individually
            Object.keys(this.session.trafficSource.utmParams).forEach(key => {
                this.session.trafficSource[key] = this.session.trafficSource.utmParams[key] || "";
            });
            
            this.session.trafficSource.referrer = referrer || "";
            this.session.trafficSource.landingPage = window.location.href;
            
            // Determine source and medium
            if (this.session.trafficSource.utm_source && this.session.trafficSource.utm_medium) {
                this.session.trafficSource.source = this.session.trafficSource.utm_source;
                this.session.trafficSource.medium = this.session.trafficSource.utm_medium;
                this.session.trafficSource.source_type = this.determineSourceType(urlParams, referrer);
            } else if (referrer) {
                const referrerMapping = {
                    "google.": { source: "google", medium: "organic", type: "organic" },
                    "facebook.": { source: "facebook", medium: "social", type: "social" },
                    "fb.": { source: "facebook", medium: "social", type: "social" },
                    "linkedin.": { source: "linkedin", medium: "social", type: "social" },
                    "twitter.": { source: "twitter", medium: "social", type: "social" },
                    "t.co": { source: "twitter", medium: "social", type: "social" },
                    "x.com": { source: "twitter", medium: "social", type: "social" },
                    "youtube.": { source: "youtube", medium: "social", type: "social" }
                };
                
                let matched = false;
                for (const [domain, data] of Object.entries(referrerMapping)) {
                    if (referrer.includes(domain)) {
                        this.session.trafficSource.source = data.source;
                        this.session.trafficSource.medium = data.medium;
                        this.session.trafficSource.source_type = data.type;
                        matched = true;
                        break;
                    }
                }
                
                if (!matched) {
                    try {
                        this.session.trafficSource.source = new URL(referrer).hostname;
                        this.session.trafficSource.medium = "referral";
                        this.session.trafficSource.source_type = "referral";
                    } catch (e) {
                        this.session.trafficSource.source = "unknown";
                        this.session.trafficSource.medium = "referral";
                        this.session.trafficSource.source_type = "referral";
                    }
                }
            } else {
                this.session.trafficSource.source = "direct";
                this.session.trafficSource.medium = "direct";
                this.session.trafficSource.source_type = "direct";
            }
            
            this.session.trafficSource.campaign = this.session.trafficSource.utm_campaign || null;
            
            // Store in session storage
            if (typeof Storage !== "undefined") {
                sessionStorage.setItem("selma_traffic_source", JSON.stringify(this.session.trafficSource));
            }
            
            console.log("Traffic source detected:", this.session.trafficSource);
        },
        
        determineSourceType: function(urlParams, referrer) {
            const medium = urlParams.get("utm_medium");
            if (medium) {
                if (medium.includes("cpc") || medium.includes("ppc") || medium.includes("paid")) {
                    return "paid";
                }
                if (medium.includes("social")) return "social";
                if (medium.includes("email")) return "email";
            }
            
            if (!referrer) return "direct";
            
            const socialDomains = ["facebook.com", "instagram.com", "linkedin.com", "twitter.com", "x.com", "youtube.com", "tiktok.com"];
            const searchDomains = ["google.", "bing.", "yahoo.", "duckduckgo.", "baidu.", "yandex."];
            
            const lowerReferrer = referrer.toLowerCase();
            
            if (socialDomains.some(domain => lowerReferrer.includes(domain))) return "social";
            if (searchDomains.some(domain => lowerReferrer.includes(domain))) return "organic";
            
            return "referral";
        },
        
        initPartnerTracking: function() {
            this.partnerId = this.getPartnerId();
            if (this.partnerId) {
                console.log("Partner identified:", this.partnerId);
                this.sessionId = this.generateSessionId();
                this.trackPartnerActivity();
                this.enhancePartnerLinks();
            } else {
                console.log("No partner identified - using default tracking");
            }
        },
        
        getPartnerId: function() {
            const urlParams = new URLSearchParams(window.location.search);
            const partnerId = urlParams.get("partner") || urlParams.get("ref") || urlParams.get("utm_source");
            if (partnerId) return partnerId;
            
            const pathMatch = window.location.pathname.toLowerCase().match(/\/partner(?:s)?\/([^\/]+)/);
            if (pathMatch) return pathMatch[1];
            
            return document.body.getAttribute("data-partner-id") || 
                   document.querySelector("[data-partner-id]")?.getAttribute("data-partner-id");
        },
        
        generateSessionId: function() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        },
        
        trackPartnerActivity: function() {
            if (!this.partnerId) return;
            
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                event: "partnerPageView",
                partnerId: this.partnerId,
                partnerSessionId: this.sessionId,
                partnerSource: window.location.href,
                scannerVersion: "enhanced_v3.5_minimizable"
            });
        },
        
        enhancePartnerLinks: function() {
            if (!this.partnerId) return;
            
            document.querySelectorAll('a[href*="selma.se"]').forEach(link => {
                try {
                    const url = new URL(link.href);
                    url.searchParams.set("ref", this.partnerId);
                    url.searchParams.set("utm_source", this.partnerId);
                    url.searchParams.set("utm_medium", "partner");
                    url.searchParams.set("utm_campaign", "partner_site");
                    link.href = url.toString();
                } catch (e) {
                    console.warn("Could not enhance link:", link.href);
                }
            });
        },
        
        findAndEnhanceForms: function() {
            // Look for forms with specific scanner attributes first
            const scannerForms = document.querySelectorAll('form[data-scan-form="true"]:not([data-scanner-enhanced="true"]), #footer-scanner-form:not([data-scanner-enhanced="true"]), #enhanced-scanner-form:not([data-scanner-enhanced="true"])');
            
            // Also look for any form with URL inputs as fallback
            const allForms = document.querySelectorAll('form:not([data-scanner-enhanced="true"])');
            
            const formsToProcess = new Set([...scannerForms, ...allForms]);
            let enhanced = 0;
            
            formsToProcess.forEach(form => {
                const urlField = form.querySelector('input[data-url-field="true"], input[id*="website-URL"], input[name*="website-URL"], input[type="url"], input[placeholder*="website"], input[placeholder*="hemsida"]');
                
                if (urlField && !form.getAttribute("data-scanner-enhanced") && form.id !== "contactForm") {
                    console.log("Found scanner form:", form.id || "unnamed");
                    this.enhanceForm(form, urlField);
                    enhanced++;
                }
            });
            
            console.log(`Enhanced ${enhanced} forms`);
            this.enableSubmitButtons();
        },
        
        enhanceForm: function(form, urlField) {
            form.setAttribute("data-scanner-enhanced", "true");
            form.setAttribute("data-scanner-version", "enhanced_v3.5_minimizable");
            urlField.setAttribute("data-url-field", "true");
            
            const formType = form.querySelector('input[type="email"], input[id*="email"], input[name*="email"]') ? "contact" : "simple";
            form.setAttribute("data-form-type", formType);
            form.setAttribute("data-wf-page-id", "");
            form.setAttribute("data-wf-element-id", "");
            
            // Remove any existing handlers
            form.onsubmit = null;
            
            // Clone to remove all event listeners
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            const finalForm = document.querySelector(`#${newForm.id}`) || newForm;
            const finalUrlField = finalForm.querySelector('[data-url-field="true"]');
            
            if (formType === "contact") {
                finalForm.addEventListener("submit", (e) => this.handleContactFormSubmit(e, finalForm, finalUrlField), true);
            } else {
                finalForm.addEventListener("submit", (e) => this.handleSimpleFormSubmit(e, finalUrlField), true);
            }
            
            console.log("Enhanced form:", finalForm.id || "unnamed", "Type:", formType);
        },
        
        enableSubmitButtons: function() {
            document.querySelectorAll('form input[type="submit"][disabled], form button[type="submit"][disabled]').forEach(button => {
                const form = button.closest("form");
                if (form && form.querySelector('input[data-url-field="true"], input[id*="website"], input[name*="website"], input[type="url"]')) {
                    button.removeAttribute("disabled");
                    button.disabled = false;
                    button.style.pointerEvents = "auto";
                    button.style.cursor = "pointer";
                    console.log("Enabled submit button in form:", form.id || "unnamed");
                }
            });
        },
        
        handleSimpleFormSubmit: function(e, urlField) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            if (window._scannerModalActive) {
                console.log("Scanner already active");
                return false;
            }
            
            const domain = urlField.value.trim();
            if (!domain || domain.length < 4) {
                alert("Vänligen ange en giltig domän");
                return false;
            }
            
            if (!this.isValidDomain(domain)) {
                alert("Vänligen ange en giltig webbadress (t.ex. example.com)");
                return false;
            }
            
            this.startScan(domain, "simple");
            return false;
        },
        
        handleContactFormSubmit: function(e, form, urlField) {
            e.preventDefault();
            e.stopPropagation();
            
            const domain = urlField.value.trim();
            if (!domain || domain.length < 4) {
                alert("Vänligen ange en giltig domän");
                return false;
            }
            
            if (!this.isValidDomain(domain)) {
                alert("Vänligen ange en giltig webbadress (t.ex. example.com)");
                return false;
            }
            
            const emailField = form.querySelector('input[type="email"], input[id*="email"], input[name*="email"]');
            const nameField = form.querySelector('input[id*="namn"], input[name*="namn"], input[id*="name"], input[name*="name"]');
            const phoneField = form.querySelector('input[type="tel"], input[id*="phone"], input[name*="phone"], input[id*="Phone"]');
            const consentField = form.querySelector('input[type="checkbox"]');
            
            if (emailField && !emailField.value.trim()) {
                alert("E-post är obligatoriskt");
                emailField.focus();
                return false;
            }
            
            if (consentField && !consentField.checked) {
                alert("Du måste acceptera integritetspolicyn");
                consentField.focus();
                return false;
            }
            
            const contactInfo = {
                email: emailField ? emailField.value.trim() : null,
                name: nameField ? nameField.value.trim() : null,
                phone: phoneField ? phoneField.value.trim() : null
            };
            
            this.startScan(domain, "contact", contactInfo);
            return false;
        },
        
        observeForNewForms: function() {
            const self = this;
            if (typeof MutationObserver === "undefined") return;
            
            const observer = new MutationObserver(function(mutations) {
                let shouldCheck = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes.length) {
                        mutation.addedNodes.forEach(function(node) {
                            if (node.nodeType === 1 && (node.tagName === "FORM" || (node.querySelector && node.querySelector("form")))) {
                                shouldCheck = true;
                            }
                        });
                    }
                });
                
                if (shouldCheck) {
                    setTimeout(function() {
                        self.findAndEnhanceForms();
                    }, 500);
                }
            });
            
            observer.observe(document.body, { childList: true, subtree: true });
        },
        
        cleanDomain: function(domain) {
            domain = domain.replace(/^https?:\/\//, "");
            domain = domain.replace(/^www\./, "");
            domain = domain.replace(/\/$/, "");
            domain = domain.split("/")[0];
            domain = domain.split("?")[0];
            return domain.trim();
        },
        
        isValidDomain: function(domain) {
            return /^(?:(?:https?|ftp):\/\/)?(?:www\.)?[a-zA-Z0-9-]+\.[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)*(?:\/[^\s]*)?$/.test(domain);
        },
        
        generateGuid: function() {
            const timestamp = Date.now().toString(16);
            const randomPart = Math.random().toString(16).substring(2) + "0".repeat(16);
            return [
                timestamp.substr(0, 8),
                timestamp.substr(8, 4),
                "4000",
                ((parseInt(randomPart.substr(0, 2), 16) & 0x3f) | 0x80).toString(16) + randomPart.substr(2, 2),
                randomPart.substr(4, 12)
            ].join("-");
        },
        
        startScan: function(domain, formType = "simple", contactInfo = null) {
            const cleanedDomain = this.cleanDomain(domain);
            
            this.webhookQueue.clear();
            this.clearWebhookTimers();
            
            // Restore traffic source from session storage if available
            if (sessionStorage.getItem("selma_traffic_source")) {
                const storedTrafficSource = JSON.parse(sessionStorage.getItem("selma_traffic_source"));
                this.session.trafficSource = { ...this.session.trafficSource, ...storedTrafficSource };
            }
            
            // Reset session
            this.session.guid = this.generateGuid();
            this.session.domain = cleanedDomain;
            this.session.reportUrl = null;
            this.session.whitelabelReportUrl = null;
            this.session.brandedReportUrl = null;
            this.session.reportId = null;
            this.session.reportLoaded = false;
            this.session.reportAnalyzed = false;
            this.session.contactInfo = contactInfo || { email: null, phone: null, name: null };
            this.session.scanState = "initiated";
            this.session.formType = formType;
            this.session.webhookSent = false;
            this.session.finalWebhookSent = false;
            this.session.complianceStatus = null;
            this.session.timestamp = new Date().toISOString();
            this.session.issuesCount = 0;
            this.session.formId = domain;
            this.session.ctaMinimized = false;
            
            this.session.reportUrl = `${this.config.aceUrl}/?sessionid=${this.session.guid}&partnerid=${this.config.partnerId}&locale=${this.config.locale}#audit/${cleanedDomain}`;
            
            console.log("Starting scan for:", cleanedDomain, "Form type:", formType);
            
            this.trackEvent("enhanced_scanner_submit_v3_5", {
                scanned_domain: cleanedDomain,
                form_type: formType,
                has_contact_info: !!(contactInfo && contactInfo.email),
                scanner_version: "enhanced_v3.5_minimizable",
                session_id: this.session.guid,
                partner_id: this.partnerId || null,
                traffic_source: this.session.trafficSource.source,
                traffic_medium: this.session.trafficSource.medium,
                traffic_campaign: this.session.trafficSource.campaign,
                source_type: this.session.trafficSource.source_type
            });
            
            if (formType === "contact" && contactInfo && contactInfo.email) {
                this.session.scanState = "completed";
                if (window.ScannerUI && typeof window.ScannerUI.showReportModal === 'function') {
                    window.ScannerUI.showReportModal(this.session.reportUrl);
                }
                this.sendToAccessiBe();
                this.clearWebhookTimers();
                this.sendFinalWebhook("scanner_lead_complete");
            } else {
                this.startBackgroundReportLoading();
            }
        },
        
      // Initiate background report loading - CORE FUNCTION
startBackgroundReportLoading: function() {
    // Verify ScannerUI is available
    if (!window.ScannerUI || typeof window.ScannerUI.startBackgroundReportLoading !== 'function') {
        console.warn("ScannerUI not available, opening in new tab");
        window.open(this.session.reportUrl, '_blank');
        return;
    }
    
    // Use the UI helper to show the report
    window.ScannerUI.startBackgroundReportLoading(this.session.reportUrl, () => {
        // Callback when report loads
        this.session.reportLoaded = true;
        console.log("Report loaded successfully");
        
        // Show CTA overlay if enabled
        if (this.config.enableCTAOverlay && window.ScannerUI.showCTAOverlay) {
            setTimeout(() => {
                window.ScannerUI.showCTAOverlay(this.session);
            }, 2000);
        }
    });
},
        
        clearWebhookTimers: function() {
            if (this.session.webhookTimer) {
                clearTimeout(this.session.webhookTimer);
                this.session.webhookTimer = null;
            }
            if (this.session.maxWaitTimer) {
                clearTimeout(this.session.maxWaitTimer);
                this.session.maxWaitTimer = null;
            }
            if (this.session.reportCheckInterval) {
                clearInterval(this.session.reportCheckInterval);
                this.session.reportCheckInterval = null;
            }
        },
        
        sendFinalWebhook: function(action = "scanner_lead_complete") {
            if (this.session.finalWebhookSent) {
                console.log("Final webhook already sent, skipping");
                return Promise.resolve("already_sent");
            }
            
            this.session.finalWebhookSent = true;
            
            const dataComplete = !!(this.session.contactInfo.email && this.session.contactInfo.phone);
            
            const webhookData = {
                action: action,
                name: this.session.contactInfo.name || "Ej angivet",
                email: this.session.contactInfo.email || "not.provided@placeholder.com",
                phone: this.session.contactInfo.phone || "0000000000",
                website: this.session.domain,
                sessionId: this.session.guid,
                partnerId: this.config.partnerId,
                timestamp: new Date().toISOString(),
                source: window.location.href,
                reportUrl: this.session.reportUrl || "",
                whitelabelReportUrl: this.session.whitelabelReportUrl || "",
                brandedReportUrl: this.session.brandedReportUrl || "",
                reportId: this.session.reportId || "",
                dataComplete: dataComplete,
                dataCompleteness: dataComplete ? "complete" : "partial",
                formType: this.session.formType || "unknown",
                scannerVersion: "enhanced_v3.5_minimizable",
                partnerId_detected: this.partnerId || null,
                partnerPage: window.location.pathname.includes("/partner/") ? window.location.pathname : null,
                isPartnerScan: window.location.pathname.includes("/partner/"),
                complianceStatus: this.session.complianceStatus || "unknown",
                issuesCount: this.session.issuesCount || 0,
                traffic_source: {
                    utm_source: this.session.trafficSource.utm_source,
                    utm_medium: this.session.trafficSource.utm_medium,
                    utm_campaign: this.session.trafficSource.utm_campaign,
                    utm_content: this.session.trafficSource.utm_content,
                    utm_term: this.session.trafficSource.utm_term,
                    referrer: this.session.trafficSource.referrer,
                    landing_page: this.session.trafficSource.landingPage,
                    source_type: this.session.trafficSource.source_type
                },
                trafficSource: this.session.trafficSource.source || "direct",
                trafficMedium: this.session.trafficSource.medium || "direct",
                trafficCampaign: this.session.trafficSource.campaign || null,
                trafficReferrer: this.session.trafficSource.referrer || null,
                features: {
                    brandId: !!this.config.brandId,
                    whitelabel: this.config.enableWhitelabel,
                    ctaOverlay: this.config.enableCTAOverlay,
                    minimizableCTA: true
                },
                locale: this.config.locale
            };
            
            console.log("Sending final webhook:", {
                action: action,
                hasEmail: !!this.session.contactInfo.email,
                hasPhone: !!this.session.contactInfo.phone,
                domain: webhookData.website,
                dataComplete: dataComplete
            });
            
            return fetch(this.config.webhookUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(webhookData)
            }).then(response => {
                if (!response.ok) {
                    throw new Error(`Webhook failed: ${response.status}`);
                }
                console.log("Final webhook sent successfully:", action);
                return response;
            }).catch(error => {
                console.error("Webhook error:", error);
                return Promise.resolve("webhook_failed");
            });
        },
        
        sendToAccessiBe: function() {
            const data = {
                email: this.session.contactInfo.email || "anonymous@example.com",
                name: this.session.contactInfo.name || "Anonymous User",
                domain: this.session.domain,
                guid: this.session.guid,
                source: window.location.href,
                reportUrl: this.session.brandedReportUrl || this.session.whitelabelReportUrl || this.session.reportUrl || "",
                scannerVersion: "enhanced_v3.5_minimizable",
                partnerId_detected: this.partnerId || null,
                trafficSource: this.session.trafficSource,
                features: {
                    brandId: !!this.config.brandId,
                    whitelabel: this.config.enableWhitelabel,
                    ctaOverlay: this.config.enableCTAOverlay
                }
            };
            
            fetch(`${this.config.aceUrl}/api/partners/lead-email`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "x-api-key": this.config.partnerId
                },
                body: JSON.stringify(data)
            }).then(response => {
                if (response.ok) {
                    return response.json().catch(() => ({}));
                } else {
                    return response.text().then(text => Promise.reject(`API error: ${response.status}`));
                }
            }).then(data => {
                console.log("AccessiBe API success:", data);
                this.trackEvent("accessibe_api_success", {
                    website: this.session.domain,
                    has_contact_info: !!this.session.contactInfo.email
                });
            }).catch(error => {
                console.error("AccessiBe API error:", error);
                this.trackEvent("accessibe_api_error", {
                    website: this.session.domain,
                    error_message: error.message || "Unknown error"
                });
            });
        },
        
        trackEvent: function(eventName, properties = {}) {
            const eventData = {
                ...properties,
                scanner_version: "enhanced_v3.5_minimizable",
                timestamp: new Date().toISOString(),
                partner_id: this.partnerId || null,
                traffic_source: this.session.trafficSource?.source || "direct",
                traffic_medium: this.session.trafficSource?.medium || "direct"
            };
            
            // Send to tracking module if available
            if (window.ScannerTracking && typeof window.ScannerTracking.trackEvent === 'function') {
                window.ScannerTracking.trackEvent(eventName, eventData);
            } else if (window.dataLayer) {
                window.dataLayer.push({
                    event: eventName,
                    ...eventData
                });
            }
            
            console.log("Event tracked:", eventName, eventData);
        },
        
        setupMessageListeners: function() {
            const self = this;
            
            window.addEventListener("message", function(event) {
                if (event.origin === self.config.aceUrl && event.data && event.data.acsbAceResults) {
                    console.log("AccessiBe results received, processing...");
                    self.processAccessiBeResults(event.data.acsbAceResults);
                }
            }, true);
        },
        
        processAccessiBeResults: function(data) {
            try {
                const dataStr = JSON.stringify(data);
                const reportIdMatch = dataStr.match(/[a-f0-9]{24}/);
                
                if (reportIdMatch) {
                    const reportId = reportIdMatch[0];
                    this.session.reportId = reportId;
                    
                    if (this.config.brandId) {
                        this.session.brandedReportUrl = `${this.config.aceUrl}/reports/${reportId}?brandId=${this.config.brandId}`;
                    }
                    
                    if (this.config.enableWhitelabel) {
                        this.session.whitelabelReportUrl = `${this.config.aceUrl}/reports/${reportId}?whitelabel=true`;
                    }
                    
                    console.log("Report ID processed:", reportId);
                }
                
                const lowerStr = dataStr.toLowerCase();
                if (lowerStr.includes("compliant") || lowerStr.includes("accessible")) {
                    this.session.complianceStatus = "compliant";
                } else if (lowerStr.includes("non-compliant") || lowerStr.includes("issues")) {
                    this.session.complianceStatus = "non-compliant";
                }
                
                const issuesMatch = dataStr.match(/(\d+)\s*(?:issues?|problem)/i);
                if (issuesMatch) {
                    this.session.issuesCount = parseInt(issuesMatch[1]);
                }
                
                if (window.ScannerUI && typeof window.ScannerUI.updateContactModalWithCompliance === 'function') {
                    window.ScannerUI.updateContactModalWithCompliance(this.session);
                }
                
                if (this.config.enableCTAOverlay && window.ScannerUI && typeof window.ScannerUI.showCTAOverlay === 'function') {
                    window.ScannerUI.showCTAOverlay(this.session);
                }
            } catch (error) {
                console.error("Error processing results:", error);
            }
        },
        
        preventModalBypass: function() {
            const modal = document.getElementById("contactModal");
            if (!modal) return;
            
            modal.addEventListener("click", function(e) {
                if (e.target === modal) {
                    e.stopPropagation();
                }
            });
            
            document.addEventListener("keydown", function(e) {
                if (e.key === "Escape" && modal && modal.style.display === "block") {
                    e.preventDefault();
                }
            });
        },
        
        addPartnerDataToForm: function(form) {
            if (!this.partnerId) return;
            
            const fieldsToAdd = [
                { name: "partner_id", value: this.partnerId },
                { name: "partner_session", value: this.sessionId || "" },
                { name: "scanner_version", value: "enhanced_v3.5_minimizable" },
                { name: "traffic_source", value: this.session.trafficSource?.source || "direct" },
                { name: "traffic_medium", value: this.session.trafficSource?.medium || "direct" }
            ];
            
            fieldsToAdd.forEach(field => {
                if (!form.querySelector(`input[name="${field.name}"]`)) {
                    const input = document.createElement("input");
                    input.type = "hidden";
                    input.name = field.name;
                    input.value = field.value;
                    form.appendChild(input);
                }
            });
        },
        
        // Public API methods
        onResourceLoaded: function(resourceName) {
            console.log("Resource loaded:", resourceName);
        }
    };
    
    // Auto-initialize if DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.EnhancedScanner.init();
        });
    } else {
        window.EnhancedScanner.init();
    }
    
})();
