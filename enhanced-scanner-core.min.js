/**
 * Enhanced Scanner Core v2.1
 * Core scanning functionality, session management, and form handling
 */
(function() {
    'use strict';
    
    // Prevent duplicate initialization
    if (window.EnhancedScanner) return;
    
    window.EnhancedScanner = {
        config: {
            partnerId: "66f5d0180130eb9ebefb1233",
            aceUrl: "https://acsbace.com",
            webhookUrl: "https://hook.eu2.make.com/h1559o76njvrl2wc3whcg9w3cdb511qq",
            brandId: "68ba8982b6389e56a246d8f6",
            locale: "sv",
            enableWhitelabel: true,
            enableCTAOverlay: true,
            contactPopupTiming: "onLoad",
            debugMode: true,
            webhookDelay: 15000,
            maxWebhookWait: 30000
        },
        
        session: {
            guid: null,
            domain: null,
            reportUrl: null,
            whitelabelReportUrl: null,
            brandedReportUrl: null,
            reportId: null,
            contactInfo: { email: null, phone: null, name: null },
            scanState: null,
            formType: null,
            webhookSent: false,
            timestamp: null,
            trafficSource: {
                medium: null,
                source: null,
                campaign: null,
                referrer: null,
                utmParams: {}
            },
            webhookTimer: null,
            maxWaitTimer: null
        },
        
        webhookQueue: new Set(),
        
        init: function() {
            console.log("Enhanced Scanner Core v2.1 initializing...");
            
            if (window._scannerCoreInitialized) {
                console.log("Scanner core already initialized");
                return;
            }
            window._scannerCoreInitialized = true;
            
            this.detectTrafficSource();
            this.initPartnerTracking();
            this.setupMessageListeners();
            this.findAndEnhanceForms();
            this.enableSubmitButtons();
            
            // Initialize other modules if available
            if (window.ScannerUI && typeof window.ScannerUI.init === 'function') {
                window.ScannerUI.init();
            }
            
            if (window.ScannerTracking && typeof window.ScannerTracking.init === 'function') {
                window.ScannerTracking.init();
            }
            
            if (window.ScannerResources && typeof window.ScannerResources.init === 'function') {
                window.ScannerResources.init();
            }
            
            console.log("Enhanced Scanner Core initialized successfully");
        },
        
        // Traffic Source Detection
        detectTrafficSource: function() {
            const urlParams = new URLSearchParams(window.location.search);
            const referrer = document.referrer;
            
            this.session.trafficSource.utmParams = {
                utm_source: urlParams.get('utm_source'),
                utm_medium: urlParams.get('utm_medium'),
                utm_campaign: urlParams.get('utm_campaign'),
                utm_term: urlParams.get('utm_term'),
                utm_content: urlParams.get('utm_content')
            };
            
            if (this.session.trafficSource.utmParams.utm_source && this.session.trafficSource.utmParams.utm_medium) {
                this.session.trafficSource.source = this.session.trafficSource.utmParams.utm_source;
                this.session.trafficSource.medium = this.session.trafficSource.utmParams.utm_medium;
            } else if (referrer) {
                this.session.trafficSource.referrer = referrer;
                
                if (referrer.includes('google.')) {
                    this.session.trafficSource.source = 'google';
                    this.session.trafficSource.medium = 'organic';
                } else if (referrer.includes('facebook.') || referrer.includes('fb.')) {
                    this.session.trafficSource.source = 'facebook';
                    this.session.trafficSource.medium = 'social';
                } else if (referrer.includes('linkedin.')) {
                    this.session.trafficSource.source = 'linkedin';
                    this.session.trafficSource.medium = 'social';
                } else {
                    this.session.trafficSource.source = new URL(referrer).hostname;
                    this.session.trafficSource.medium = 'referral';
                }
            } else {
                this.session.trafficSource.source = 'direct';
                this.session.trafficSource.medium = 'direct';
            }
            
            this.session.trafficSource.campaign = this.session.trafficSource.utmParams.utm_campaign || null;
            
            console.log("Traffic source detected:", this.session.trafficSource);
        },
        
        // Partner Tracking System
        initPartnerTracking: function() {
            this.partnerId = this.getPartnerId();
            if (this.partnerId) {
                console.log("Partner identified:", this.partnerId);
                this.sessionId = this.generateSessionId();
                this.trackPartnerActivity();
                this.enhancePartnerLinks();
            }
        },
        
        getPartnerId: function() {
            const urlParams = new URLSearchParams(window.location.search);
            const partner = urlParams.get("partner") || urlParams.get("ref") || urlParams.get("utm_source");
            
            if (partner) return partner;
            
            const pathMatch = window.location.pathname.toLowerCase().match(/\/partner(?:s)?\/([^\/]+)/);
            if (pathMatch) return pathMatch[1];
            
            const dataPartner = document.body.getAttribute("data-partner-id") || 
                               document.querySelector('[data-partner-id]')?.getAttribute("data-partner-id");
            
            return dataPartner;
        },
        
        generateSessionId: function() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        },
        
        trackPartnerActivity: function() {
            if (!this.partnerId) return;
            
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                event: "partnerPageView",
                partnerId: this.partnerId,
                partnerSessionId: this.sessionId,
                partnerSource: window.location.href,
                scannerVersion: "enhanced_v2.1"
            });
        },
        
        enhancePartnerLinks: function() {
            if (!this.partnerId) return;
            
            document.querySelectorAll('a[href*="selma.se"]').forEach(link => {
                const url = new URL(link.href);
                url.searchParams.set("ref", this.partnerId);
                url.searchParams.set("utm_source", this.partnerId);
                url.searchParams.set("utm_medium", "partner");
                url.searchParams.set("utm_campaign", "partner_site");
                link.href = url.toString();
            });
        },
        
        // Message Listeners for AccessiBe Results
        setupMessageListeners: function() {
            window.addEventListener("message", (event) => {
                if (event.origin === this.config.aceUrl && event.data?.acsbAceResults) {
                    console.log("AccessiBe results received, processing...");
                    this.processAccessiBeResults(event.data.acsbAceResults);
                }
            }, true);
        },
        
        processAccessiBeResults: function(results) {
            const reportIdMatch = JSON.stringify(results).match(/[a-f0-9]{24}/);
            
            if (reportIdMatch) {
                const reportId = reportIdMatch[0];
                this.session.reportId = reportId;
                
                if (this.config.brandId) {
                    this.session.brandedReportUrl = `${this.config.aceUrl}/reports/${reportId}?brandId=${this.config.brandId}`;
                }
                
                if (this.config.enableWhitelabel) {
                    this.session.whitelabelReportUrl = `${this.config.aceUrl}/reports/${reportId}?whitelabel=true`;
                }
                
                console.log("Report ID processed:", reportId);
                
                // Notify UI module if available
                if (window.ScannerUI && typeof window.ScannerUI.onReportReady === 'function') {
                    window.ScannerUI.onReportReady(reportId);
                }
            }
        },
        
        generateGuid: function() {
            const timestamp = Date.now().toString(16);
            const random = Math.random().toString(16) + '0'.repeat(16);
            return [
                timestamp.substr(0,8), 
                timestamp.substr(8,4), 
                '4000-8' + random.substr(13,3), 
                random.substr(16,12)
            ].join('-');
        },
        
        isValidDomain: function(domain) {
            const urlRegex = /^(?:(?:https?|ftp):\/\/)?(?:www\.)?[a-zA-Z0-9-]+\.[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)*(?:\/[^\s]*)?$/;
            return urlRegex.test(domain);
        },
        
        cleanDomain: function(domain) {
            return domain.replace(/^https?:\/\//, '').replace(/^www\./, '').replace(/\/$/, '');
        },
        
        // Form Detection and Enhancement
        findAndEnhanceForms: function() {
            const forms = document.querySelectorAll('form');
            let enhancedCount = 0;
            
            forms.forEach(form => {
                const urlInput = form.querySelector(`
                    input[type="url"], 
                    input[placeholder*="website"], 
                    input[placeholder*="hemsida"], 
                    input[id*="website"], 
                    input[id*="URL"], 
                    input[name*="website"], 
                    input[name*="URL"],
                    input[data-url-field="true"]
                `.replace(/\s+/g, ''));
                
                if (urlInput && !form.getAttribute('data-scanner-enhanced') && 
                    !form.id.includes('email-form') && 
                    form.id !== 'contactForm') {
                    
                    console.log("Found scanner form:", form.id || 'unnamed');
                    this.enhanceForm(form, urlInput);
                    enhancedCount++;
                }
            });
            
            console.log(`Enhanced ${enhancedCount} forms`);
        },
        
        enhanceForm: function(form, urlInput) {
            form.setAttribute('data-scanner-enhanced', 'true');
            form.setAttribute('data-scanner-version', 'enhanced_v2.1');
            urlInput.setAttribute('data-url-field', 'true');
            
            const hasContactFields = form.querySelector('input[type="email"], input[id*="email"], input[name*="email"]');
            const formType = hasContactFields ? 'contact' : 'simple';
            form.setAttribute('data-form-type', formType);
            
            form.onsubmit = null;
            
            if (formType === 'contact') {
                form.addEventListener('submit', (e) => this.handleContactFormSubmit(e, form, urlInput));
            } else {
                form.addEventListener('submit', (e) => this.handleSimpleFormSubmit(e, urlInput));
            }
            
            console.log("Enhanced form:", form.id || 'unnamed', "Type:", formType);
        },
        
        enableSubmitButtons: function() {
            const disabledButtons = document.querySelectorAll('form input[type="submit"][disabled], form button[type="submit"][disabled]');
            
            disabledButtons.forEach(button => {
                const form = button.closest('form');
                const hasUrlField = form && form.querySelector('input[data-url-field="true"], input[id*="website"], input[name*="website"]');
                
                if (hasUrlField) {
                    button.removeAttribute('disabled');
                    button.disabled = false;
                    button.style.pointerEvents = 'auto';
                    button.style.cursor = 'pointer';
                    console.log("Enabled submit button in form:", form.id || 'unnamed');
                }
            });
        },
        
        // Form Submit Handlers
        handleSimpleFormSubmit: function(e, urlInput) {
            e.preventDefault();
            e.stopPropagation();
            
            if (window._scannerModalActive) {
                console.log("Scanner already active");
                return false;
            }
            
            const domain = urlInput.value.trim();
            
            if (!domain || domain.length < 4) {
                alert("Vänligen ange en giltig domän");
                return false;
            }
            
            if (!this.isValidDomain(domain)) {
                alert("Vänligen ange en giltig webbadress (t.ex. example.com)");
                return false;
            }
            
            this.startScan(domain, 'simple');
            return false;
        },
        
        handleContactFormSubmit: function(e, form, urlInput) {
            e.preventDefault();
            e.stopPropagation();
            
            const domain = urlInput.value.trim();
            
            if (!domain || domain.length < 4) {
                alert("Vänligen ange en giltig domän");
                return false;
            }
            
            if (!this.isValidDomain(domain)) {
                alert("Vänligen ange en giltig webbadress (t.ex. example.com)");
                return false;
            }
            
            const emailInput = form.querySelector('input[type="email"], input[id*="email"], input[name*="email"]');
            const nameInput = form.querySelector('input[id*="namn"], input[name*="namn"], input[id*="name"], input[name*="name"]');
            const phoneInput = form.querySelector('input[type="tel"], input[id*="phone"], input[name*="phone"], input[id*="Phone"]');
            const checkboxInput = form.querySelector('input[type="checkbox"]');
            
            if (emailInput && !emailInput.value.trim()) {
                alert("E-post är obligatoriskt");
                emailInput.focus();
                return false;
            }
            
            if (checkboxInput && !checkboxInput.checked) {
                alert("Du måste acceptera integritetspolicyn");
                checkboxInput.focus();
                return false;
            }
            
            const contactInfo = {
                email: emailInput ? emailInput.value.trim() : null,
                name: nameInput ? nameInput.value.trim() : null,
                phone: phoneInput ? phoneInput.value.trim() : null
            };
            
            this.startScan(domain, 'contact', contactInfo);
            return false;
        },
        
        // Core Scanning Logic
        startScan: function(domain, formType = 'simple', contactInfo = null) {
            const cleanedDomain = this.cleanDomain(domain);
            
            this.webhookQueue.clear();
            this.clearWebhookTimers();
            
            this.session = {
                guid: this.generateGuid(),
                domain: cleanedDomain,
                reportUrl: null,
                whitelabelReportUrl: null,
                brandedReportUrl: null,
                reportId: null,
                contactInfo: contactInfo || { email: null, phone: null, name: null },
                scanState: 'initiated',
                formType: formType,
                webhookSent: false,
                timestamp: new Date().toISOString(),
                trafficSource: this.session.trafficSource,
                webhookTimer: null,
                maxWaitTimer: null
            };
            
            this.session.reportUrl = `${this.config.aceUrl}/?sessionid=${this.session.guid}&partnerid=${this.config.partnerId}&locale=${this.config.locale}#audit/${cleanedDomain}`;
            
            console.log("Starting scan for:", cleanedDomain, "Form type:", formType);
            
            // Track with GTM if available
            if (window.dataLayer) {
                window.dataLayer.push({
                    event: 'enhanced_scanner_submit_v2_1',
                    scanned_domain: cleanedDomain,
                    form_type: formType,
                    has_contact_info: !!(contactInfo && contactInfo.email),
                    scanner_version: 'enhanced_v2.1',
                    session_id: this.session.guid,
                    partner_id: this.partnerId || null,
                    traffic_source: this.session.trafficSource.source,
                    traffic_medium: this.session.trafficSource.medium,
                    traffic_campaign: this.session.trafficSource.campaign
                });
            }
            
            this.setupDelayedWebhook();
            
            if (formType === 'contact' && contactInfo && contactInfo.email) {
                this.session.scanState = 'completed';
                this.showReportModal();
                this.sendToAccessiBe();
                this.clearWebhookTimers();
                this.sendWebhook('scanner_lead_complete');
            } else {
                this.showContactModal();
            }
        },
        
        setupDelayedWebhook: function() {
            this.session.webhookTimer = setTimeout(() => {
                if (this.session.scanState === 'initiated' && !this.session.webhookSent) {
                    this.sendWebhook('scanner_initiated');
                }
            }, this.config.webhookDelay);
            
            this.session.maxWaitTimer = setTimeout(() => {
                if (this.session.scanState === 'initiated' && !this.session.webhookSent) {
                    this.session.scanState = 'abandoned';
                    this.sendWebhook('scanner_abandoned');
                }
            }, this.config.maxWebhookWait);
        },
        
        clearWebhookTimers: function() {
            if (this.session.webhookTimer) {
                clearTimeout(this.session.webhookTimer);
                this.session.webhookTimer = null;
            }
            if (this.session.maxWaitTimer) {
                clearTimeout(this.session.maxWaitTimer);
                this.session.maxWaitTimer = null;
            }
        },
        
        // Contact Modal Handling (delegates to UI module if available)
        showContactModal: function() {
            if (window.ScannerUI && typeof window.ScannerUI.showContactModal === 'function') {
                window.ScannerUI.showContactModal();
            } else {
                const modal = document.getElementById('contactModal');
                if (modal) {
                    modal.style.display = 'block';
                }
            }
        },
        
        showReportModal: function() {
            if (window.ScannerUI && typeof window.ScannerUI.showReportModal === 'function') {
                window.ScannerUI.showReportModal();
            } else {
                window.open(this.session.reportUrl, '_blank');
            }
        },
        
        handleContactSubmit: function(email, phone) {
            this.session.contactInfo.email = email;
            this.session.contactInfo.phone = phone;
            this.session.scanState = 'completed';
            
            console.log("Contact info collected:", this.session.contactInfo);
            
            this.clearWebhookTimers();
            this.showReportModal();
            this.waitForReportAndSend();
            
            return true;
        },
        
        waitForReportAndSend: function() {
            let attempts = 0;
            const maxAttempts = 10;
            
            const checkInterval = setInterval(() => {
                attempts++;
                
                if (this.session.reportId && (this.session.whitelabelReportUrl || this.session.brandedReportUrl)) {
                    clearInterval(checkInterval);
                    this.sendToAccessiBe();
                    this.sendWebhook('scanner_lead_complete');
                } else if (attempts >= maxAttempts) {
                    clearInterval(checkInterval);
                    console.log("Report ID not received, sending webhook anyway");
                    this.sendToAccessiBe();
                    this.sendWebhook('scanner_lead_complete');
                }
            }, 1000);
        },
        
        // API Communication
        sendWebhook: function(action = 'scanner_lead_complete') {
            const webhookKey = `${this.session.guid}-${this.session.domain}-${action}`;
            
            if (this.webhookQueue.has(webhookKey)) {
                console.log("Duplicate webhook prevented:", webhookKey);
                return Promise.resolve('duplicate');
            }
            
            if (!this.session.domain) {
                console.log("Cannot send webhook - missing domain");
                return Promise.reject('missing_domain');
            }
            
            const dataComplete = !!(this.session.contactInfo.email && this.session.contactInfo.phone);
            
            const data = {
                name: this.session.contactInfo.name || "Not provided",
                email: this.session.contactInfo.email || "not.provided@placeholder.com",
                phone: this.session.contactInfo.phone || "0000000000",
                website: this.session.domain,
                sessionId: this.session.guid,
                partnerId: this.config.partnerId,
                timestamp: new Date().toISOString(),
                source: window.location.href,
                reportUrl: this.session.reportUrl || "",
                whitelabelReportUrl: this.session.whitelabelReportUrl || "",
                brandedReportUrl: this.session.brandedReportUrl || "",
                reportId: this.session.reportId || "",
                action: action,
                dataComplete: dataComplete,
                dataCompleteness: dataComplete ? 'complete' : 'partial',
                partnerPage: window.location.pathname.includes('/partner/') ? window.location.pathname : null,
                isPartnerScan: window.location.pathname.includes('/partner/'),
                formType: this.session.formType || 'unknown',
                scannerVersion: 'enhanced_v2.1',
                partnerId_detected: this.partnerId || null,
                trafficSource: this.session.trafficSource.source || 'direct',
                trafficMedium: this.session.trafficSource.medium || 'direct',
                trafficCampaign: this.session.trafficSource.campaign || null,
                trafficReferrer: this.session.trafficSource.referrer || null,
                utmSource: this.session.trafficSource.utmParams.utm_source || null,
                utmMedium: this.session.trafficSource.utmParams.utm_medium || null,
                utmCampaign: this.session.trafficSource.utmParams.utm_campaign || null,
                utmTerm: this.session.trafficSource.utmParams.utm_term || null,
                utmContent: this.session.trafficSource.utmParams.utm_content || null,
                features: {
                    brandId: !!this.config.brandId,
                    whitelabel: this.config.enableWhitelabel,
                    ctaOverlay: this.config.enableCTAOverlay
                }
            };
            
            console.log("Sending webhook:", action, "for domain:", data.website);
            
            this.webhookQueue.add(webhookKey);
            
            return fetch(this.config.webhookUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Webhook failed: ${response.status}`);
                }
                console.log("Webhook sent successfully");
                
                if (['scanner_lead_complete', 'scanner_closed_incomplete', 'scanner_abandoned', 'scanner_initiated'].includes(action)) {
                    this.session.webhookSent = true;
                }
                
                return response;
            })
            .catch(error => {
                console.error("Webhook error:", error);
                this.webhookQueue.delete(webhookKey);
                throw error;
            });
        },
        
        sendToAccessiBe: function() {
            const data = {
                email: this.session.contactInfo.email || 'anonymous@example.com',
                name: this.session.contactInfo.name || 'Anonymous User',
                domain: this.session.domain,
                guid: this.session.guid,
                source: window.location.href,
                reportUrl: this.session.brandedReportUrl || this.session.whitelabelReportUrl || this.session.reportUrl || "",
                scannerVersion: 'enhanced_v2.1',
                partnerId_detected: this.partnerId || null,
                trafficSource: this.session.trafficSource,
                features: {
                    brandId: !!this.config.brandId,
                    whitelabel: this.config.enableWhitelabel,
                    ctaOverlay: this.config.enableCTAOverlay
                }
            };
            
            return fetch(`${this.config.aceUrl}/api/partners/lead-email`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.config.partnerId
                },
                body: JSON.stringify(data)
            })
            .then(response => response.ok ? response.json().catch(() => ({})) : response.text().then(text => Promise.reject(`API error: ${response.status}`)))
            .then(result => {
                console.log("AccessiBe API success:", result);
                this.trackEvent('accessibe_api_success', {
                    website: this.session.domain,
                    has_contact_info: !!this.session.contactInfo.email
                });
            })
            .catch(error => {
                console.error("AccessiBe API error:", error);
                this.trackEvent('accessibe_api_error', {
                    website: this.session.domain,
                    error_message: error.message || 'Unknown error'
                });
            });
        },
        
        // Event tracking wrapper
        trackEvent: function(eventName, properties = {}) {
            const eventData = {
                ...properties,
                scanner_version: 'enhanced_v2.1',
                timestamp: new Date().toISOString(),
                partner_id: this.partnerId || null,
                traffic_source: this.session.trafficSource?.source || 'direct',
                traffic_medium: this.session.trafficSource?.medium || 'direct'
            };
            
            // Send to tracking module if available
            if (window.ScannerTracking && typeof window.ScannerTracking.trackEvent === 'function') {
                window.ScannerTracking.trackEvent(eventName, eventData);
            }
            
            // Fallback to dataLayer
            if (window.dataLayer) {
                window.dataLayer.push({
                    event: eventName,
                    ...eventData
                });
            }
            
            console.log("Event tracked:", eventName, eventData);
        }
    };
    
    // Auto-initialize if DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.EnhancedScanner.init();
        });
    } else {
        window.EnhancedScanner.init();
    }
    
})();