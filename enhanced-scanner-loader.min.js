/**
 * Enhanced Scanner Loader v2.2 - FIXED VERSION
 * jsDelivr CDN loader with robust error handling and fallback
 */
(function() {
    'use strict';
    
    if (window._scannerLoaderInitialized) return;
    window._scannerLoaderInitialized = true;
    
    // Generate unique cache buster
    const CACHE_BUSTER = Date.now();
    
    const SCANNER_CONFIG = {
        baseUrl: 'https://cdn.jsdelivr.net/gh/kaalione/selma-js-assets@latest/',
        version: '2.2',
        cacheBuster: CACHE_BUSTER,
        modules: {
            core: 'enhanced-scanner-core.min.js',
            tracking: 'enhanced-scanner-tracking.min.js', 
            ui: 'enhanced-scanner-ui.min.js',
            resources: 'enhanced-scanner-resources.min.js'
        },
        loadTimeout: 20000,
        fallbackEnabled: true
    };
    
    window.ScannerLoader = {
        loaded: {},
        loading: {},
        initAttempts: 0,
        maxInitAttempts: 3,
        
        loadModule: function(moduleName, callback) {
            if (this.loaded[moduleName]) {
                callback && callback();
                return Promise.resolve();
            }
            
            if (this.loading[moduleName]) {
                return this.loading[moduleName];
            }
            
            const script = document.createElement('script');
            script.src = SCANNER_CONFIG.baseUrl + SCANNER_CONFIG.modules[moduleName] + '?v=' + SCANNER_CONFIG.cacheBuster;
            script.async = true;
            script.defer = true;
            
            const promise = new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    console.warn(`⏱️ Module ${moduleName} loading timeout`);
                    reject(new Error(`Module ${moduleName} timeout`));
                }, SCANNER_CONFIG.loadTimeout);
                
                script.onload = () => {
                    clearTimeout(timeout);
                    this.loaded[moduleName] = true;
                    delete this.loading[moduleName];
                    console.log(`✅ Module ${moduleName} loaded`);
                    callback && callback();
                    resolve();
                };
                
                script.onerror = () => {
                    clearTimeout(timeout);
                    delete this.loading[moduleName];
                    console.error(`❌ Failed to load module: ${moduleName}`);
                    reject(new Error(`Failed to load module: ${moduleName}`));
                };
            });
            
            this.loading[moduleName] = promise;
            document.head.appendChild(script);
            return promise;
        },
        
        autoLoad: function() {
            console.log('🔄 Loading scanner modules from jsDelivr');
            console.log('Cache buster:', SCANNER_CONFIG.cacheBuster);
            
            // Load core first
            return this.loadModule('core')
                .then(() => {
                    // Verify core loaded properly
                    if (!window.EnhancedScanner || typeof window.EnhancedScanner.init !== 'function') {
                        throw new Error('Core module incomplete');
                    }
                    
                    // Load UI module (critical)
                    return this.loadModule('ui');
                })
                .then(() => {
                    // Load tracking module (important but not critical)
                    return this.loadModule('tracking').catch(err => {
                        console.warn('Tracking module failed, continuing:', err);
                    });
                })
                .then(() => {
                    // Load resources module (optional)
                    return this.loadModule('resources').catch(err => {
                        console.warn('Resources module failed, continuing:', err);
                    });
                })
                .then(() => {
                    console.log('✅ Scanner modules loaded, initializing...');
                    this.initializeScanner();
                })
                .catch(error => {
                    console.error('❌ Scanner loading failed:', error);
                    this.loadFallback();
                });
        },
        
        initializeScanner: function() {
            if (this.initAttempts >= this.maxInitAttempts) {
                console.error('Max initialization attempts reached');
                this.loadFallback();
                return;
            }
            
            this.initAttempts++;
            
            if (window.EnhancedScanner && typeof window.EnhancedScanner.init === 'function') {
                try {
                    window.EnhancedScanner.init();
                    console.log('✅ Scanner initialized successfully');
                } catch (error) {
                    console.error('Scanner initialization error:', error);
                    
                    if (this.initAttempts < this.maxInitAttempts) {
                        console.log('Retrying initialization...');
                        setTimeout(() => this.initializeScanner(), 1000);
                    } else {
                        this.loadFallback();
                    }
                }
            } else {
                console.warn('EnhancedScanner not available, loading fallback');
                this.loadFallback();
            }
        },
        
        loadFallback: function() {
            console.warn('🔧 Loading scanner fallback...');
            
            window.EnhancedScanner = {
                config: {
                    partnerId: "66f5d0180130eb9ebefb1233",
                    aceUrl: "https://acsbace.com",
                    locale: "sv"
                },
                
                session: {
                    guid: null,
                    domain: null,
                    reportUrl: null
                },
                
                init: function() {
                    console.log('🔍 Scanner fallback active');
                    this.findAndEnhanceForms();
                    
                    // Re-check for new forms periodically
                    setInterval(() => this.findAndEnhanceForms(), 3000);
                },
                
                findAndEnhanceForms: function() {
                    const forms = document.querySelectorAll('form');
                    let enhanced = 0;
                    
                    forms.forEach(form => {
                        if (form.getAttribute('data-fallback-enhanced')) return;
                        
                        const urlInput = form.querySelector(
                            'input[type="url"], ' +
                            'input[placeholder*="website"], ' +
                            'input[placeholder*="hemsida"], ' +
                            'input[placeholder*="webbplats"], ' +
                            'input[data-url-field="true"]'
                        );
                        
                        if (urlInput) {
                            form.setAttribute('data-fallback-enhanced', 'true');
                            
                            // Clone form to remove old event listeners
                            const newForm = form.cloneNode(true);
                            form.parentNode.replaceChild(newForm, form);
                            
                            newForm.addEventListener('submit', (e) => {
                                e.preventDefault();
                                e.stopPropagation();
                                
                                const urlField = newForm.querySelector(
                                    'input[type="url"], ' +
                                    'input[placeholder*="website"], ' +
                                    'input[placeholder*="hemsida"], ' +
                                    'input[placeholder*="webbplats"], ' +
                                    'input[data-url-field="true"]'
                                );
                                
                                const domain = urlField ? urlField.value.trim() : '';
                                
                                if (domain) {
                                    const cleanDomain = domain
                                        .replace(/^https?:\/\//, '')
                                        .replace(/^www\./, '')
                                        .split('/')[0];
                                    
                                    const sessionId = Date.now();
                                    const reportUrl = `${this.config.aceUrl}/?sessionid=${sessionId}&partnerid=${this.config.partnerId}&locale=${this.config.locale}#audit/${cleanDomain}`;
                                    
                                    console.log('🔗 Opening scanner:', reportUrl);
                                    window.open(reportUrl, '_blank');
                                    
                                    // Track in GTM if available
                                    if (window.dataLayer) {
                                        window.dataLayer.push({
                                            event: 'scanner_initiated',
                                            website: cleanDomain,
                                            fallback_mode: true
                                        });
                                    }
                                } else {
                                    alert('Vänligen ange en giltig webbadress');
                                }
                            });
                            
                            enhanced++;
                        }
                    });
                    
                    if (enhanced > 0) {
                        console.log(`✅ Enhanced ${enhanced} forms with fallback`);
                    }
                }
            };
            
            window.EnhancedScanner.init();
        }
    };
    
    // Initialize when ready
    function initializeLoader() {
        // Check if we're on a page with forms or scan intent
        const hasRelevantContent = 
            document.querySelector('form') || 
            document.querySelector('[data-scan-form="true"]') ||
            window.location.search.includes('scanner=true') ||
            window.location.pathname.includes('scanner');
        
        if (hasRelevantContent || document.readyState === 'complete') {
            // Small delay to ensure DOM is stable
            setTimeout(() => {
                window.ScannerLoader.autoLoad();
            }, 100);
        } else {
            // Wait for user interaction or timeout
            const events = ['click', 'scroll', 'keydown', 'touchstart'];
            const handler = () => {
                events.forEach(e => document.removeEventListener(e, handler));
                window.ScannerLoader.autoLoad();
            };
            
            events.forEach(e => document.addEventListener(e, handler, { once: true }));
            
            // Fallback timer (5 seconds)
            setTimeout(handler, 5000);
        }
    }
    
    // Start initialization
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeLoader);
    } else {
        setTimeout(initializeLoader, 100);
    }
    
})();
