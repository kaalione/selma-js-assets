/**
 * Enhanced Scanner Loader v2.1 - jsDelivr CDN for kaalione/selma-js-assets
 */
(function() {
    'use strict';
    
    if (window._scannerLoaderInitialized) return;
    window._scannerLoaderInitialized = true;
    
    const SCANNER_CONFIG = {
        // Your specific jsDelivr CDN URL
        baseUrl: 'https://cdn.jsdelivr.net/gh/kaalione/selma-js-assets@main/',
        
        version: '2.1',
        modules: {
            core: 'enhanced-scanner-core.min.js',
            tracking: 'enhanced-scanner-tracking.min.js', 
            ui: 'enhanced-scanner-ui.min.js',
            resources: 'enhanced-scanner-resources.min.js'
        },
        loadTimeout: 15000,
        fallbackEnabled: true,
        
        // Fallback URL in case main fails
        fallbackBaseUrl: 'https://cdn.jsdelivr.net/gh/kaalione/selma-js-assets@latest/'
    };
    
    window.ScannerLoader = {
        loaded: {},
        loading: {},
        
        loadModule: function(moduleName, callback, useFallback = false) {
            if (this.loaded[moduleName]) {
                callback && callback();
                return Promise.resolve();
            }
            
            if (this.loading[moduleName] && !useFallback) {
                return this.loading[moduleName];
            }
            
            const script = document.createElement('script');
            const baseUrl = useFallback ? SCANNER_CONFIG.fallbackBaseUrl : SCANNER_CONFIG.baseUrl;
            script.src = baseUrl + SCANNER_CONFIG.modules[moduleName];
            script.async = true;
            script.defer = true;
            
            const promise = new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    console.warn(`Module ${moduleName} loading timeout${useFallback ? ' (fallback)' : ''}`);
                    if (!useFallback) {
                        // Try fallback CDN
                        this.loadModule(moduleName, callback, true).then(resolve).catch(reject);
                    } else {
                        reject(new Error(`Module ${moduleName} failed to load`));
                    }
                }, SCANNER_CONFIG.loadTimeout);
                
                script.onload = () => {
                    clearTimeout(timeout);
                    this.loaded[moduleName] = true;
                    delete this.loading[moduleName];
                    console.log(`✓ Module ${moduleName} loaded successfully${useFallback ? ' (fallback)' : ''}`);
                    callback && callback();
                    resolve();
                };
                
                script.onerror = () => {
                    clearTimeout(timeout);
                    delete this.loading[moduleName];
                    console.error(`✗ Failed to load module: ${moduleName}${useFallback ? ' (fallback)' : ''}`);
                    
                    if (!useFallback) {
                        // Try fallback CDN
                        this.loadModule(moduleName, callback, true).then(resolve).catch(reject);
                    } else {
                        reject(new Error(`Failed to load module: ${moduleName}`));
                    }
                };
            });
            
            this.loading[moduleName] = promise;
            document.head.appendChild(script);
            return promise;
        },
        
        autoLoad: function() {
            const requiredModules = ['core'];
            console.log('🔄 Loading scanner modules from jsDelivr:', requiredModules);
            
            // Load core first, other modules are optional
            return this.loadModule('core').then(() => {
                // Verify core actually loaded
                if (!window.EnhancedScanner || typeof window.EnhancedScanner.findAndEnhanceForms !== 'function') {
                    console.warn('Core module loaded but functions not available, using fallback');
                    throw new Error('Core module incomplete');
                }
                
                // Load other modules (optional - don't fail if they don't load)
                const optionalModules = ['ui', 'tracking', 'resources'];
                const modulePromises = optionalModules.map(module => 
                    this.loadModule(module).catch(err => {
                        console.warn(`Optional module ${module} failed:`, err);
                        return null;
                    })
                );
                
                // Don't wait for optional modules
                Promise.all(modulePromises);
                
                return Promise.resolve();
            }).then(() => {
                console.log('✓ Scanner modules loaded, initializing...');
                this.initializeScanner();
            }).catch(error => {
                console.error('❌ Scanner loading failed:', error);
                this.loadFallback();
            });
        },
        
        initializeScanner: function() {
            if (window.EnhancedScanner && typeof window.EnhancedScanner.init === 'function') {
                try {
                    window.EnhancedScanner.init();
                    console.log('✓ Scanner initialized successfully');
                } catch (error) {
                    console.error('Scanner initialization error:', error);
                    this.loadFallback();
                }
            } else {
                console.warn('EnhancedScanner not available, using fallback');
                this.loadFallback();
            }
        },
        
        loadFallback: function() {
            console.warn('🔧 Loading scanner fallback...');
            
            // Create a working fallback
            window.EnhancedScanner = {
                init: function() {
                    console.log('📱 Scanner fallback active');
                    this.findAndEnhanceForms();
                },
                
                findAndEnhanceForms: function() {
                    const forms = document.querySelectorAll('form');
                    let enhanced = 0;
                    
                    forms.forEach(form => {
                        const urlInput = form.querySelector('input[type="url"], input[placeholder*="website"], input[placeholder*="hemsida"], input[data-url-field="true"]');
                        if (urlInput && !form.getAttribute('data-fallback-enhanced')) {
                            form.setAttribute('data-fallback-enhanced', 'true');
                            
                            // Remove existing handlers
                            const newForm = form.cloneNode(true);
                            form.parentNode.replaceChild(newForm, form);
                            
                            newForm.addEventListener('submit', function(e) {
                                e.preventDefault();
                                const urlField = newForm.querySelector('input[type="url"], input[placeholder*="website"], input[placeholder*="hemsida"], input[data-url-field="true"]');
                                const domain = urlField ? urlField.value.trim() : '';
                                
                                if (domain) {
                                    const cleanDomain = domain.replace(/^https?:\/\//, '').replace(/^www\./, '').split('/')[0];
                                    const reportUrl = `https://acsbace.com/?sessionid=${Date.now()}&partnerid=66f5d0180130eb9ebefb1233&locale=sv#audit/${cleanDomain}`;
                                    window.open(reportUrl, '_blank');
                                } else {
                                    alert('Vänligen ange en giltig webbadress');
                                }
                            });
                            enhanced++;
                        }
                    });
                    
                    console.log(`✓ Enhanced ${enhanced} forms with fallback`);
                }
            };
            
            window.EnhancedScanner.init();
            
            // Re-enhance forms periodically
            setTimeout(() => window.EnhancedScanner.findAndEnhanceForms(), 2000);
            setTimeout(() => window.EnhancedScanner.findAndEnhanceForms(), 5000);
        }
    };
    
    // Initialize when ready
    function initializeLoader() {
        const hasRelevantContent = document.querySelector('form') || 
                                  document.querySelector('[data-scan-form="true"]') ||
                                  window.location.search.includes('scanner=true');
        
        if (hasRelevantContent || document.readyState === 'complete') {
            window.ScannerLoader.autoLoad();
        } else {
            // Wait for interaction or timeout
            const events = ['click', 'scroll', 'keydown'];
            const handler = () => {
                events.forEach(e => document.removeEventListener(e, handler));
                window.ScannerLoader.autoLoad();
            };
            events.forEach(e => document.addEventListener(e, handler, { once: true }));
            
            // Fallback timer
            setTimeout(handler, 3000);
        }
    }
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeLoader);
    } else {
        setTimeout(initializeLoader, 100);
    }
    
})();
