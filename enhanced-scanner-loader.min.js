/**
 * Enhanced Scanner Loader v2.1
 * Dynamically loads scanner modules based on page requirements
 */
(function() {
    'use strict';
    
    // Prevent duplicate loading
    if (window._scannerLoaderInitialized) return;
    window._scannerLoaderInitialized = true;
    
    const SCANNER_CONFIG = {
        baseUrl: 'https://cdn.jsdelivr.net/gh/kaalione/selma-enhanced-scanner@latest/',
        version: '2.1',
        modules: {
            core: 'enhanced-scanner-core.min.js',
            tracking: 'enhanced-scanner-tracking.min.js', 
            ui: 'enhanced-scanner-ui.min.js',
            resources: 'enhanced-scanner-resources.min.js'
        },
        loadTimeout: 10000
    };
    
    // Global scanner state
    window.ScannerLoader = {
        loaded: {},
        loading: {},
        callbacks: [],
        
        // Load a specific module
        loadModule: function(moduleName, callback) {
            if (this.loaded[moduleName]) {
                callback && callback();
                return Promise.resolve();
            }
            
            if (this.loading[moduleName]) {
                return this.loading[moduleName];
            }
            
            const script = document.createElement('script');
            script.src = SCANNER_CONFIG.baseUrl + SCANNER_CONFIG.modules[moduleName];
            script.async = true;
            script.defer = true;
            
            const promise = new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    reject(new Error(`Module ${moduleName} failed to load within ${SCANNER_CONFIG.loadTimeout}ms`));
                }, SCANNER_CONFIG.loadTimeout);
                
                script.onload = () => {
                    clearTimeout(timeout);
                    this.loaded[moduleName] = true;
                    delete this.loading[moduleName];
                    callback && callback();
                    resolve();
                };
                
                script.onerror = () => {
                    clearTimeout(timeout);
                    delete this.loading[moduleName];
                    reject(new Error(`Failed to load module: ${moduleName}`));
                };
            });
            
            this.loading[moduleName] = promise;
            document.head.appendChild(script);
            return promise;
        },
        
        // Load all required modules based on page content
        autoLoad: function() {
            const requiredModules = this.detectRequiredModules();
            console.log('Loading scanner modules:', requiredModules);
            
            // Always load core first
            return this.loadModule('core').then(() => {
                // Load other modules in parallel
                const modulePromises = requiredModules
                    .filter(module => module !== 'core')
                    .map(module => this.loadModule(module));
                
                return Promise.all(modulePromises);
            }).then(() => {
                // Initialize scanner after all modules loaded
                if (window.EnhancedScanner && typeof window.EnhancedScanner.init === 'function') {
                    window.EnhancedScanner.init();
                }
                
                // Set up additional form enhancement attempts
                setTimeout(function() {
                    window.EnhancedScanner && window.EnhancedScanner.findAndEnhanceForms();
                }, 2000);
                
                setTimeout(function() {
                    window.EnhancedScanner && window.EnhancedScanner.findAndEnhanceForms();
                }, 5000);
            }).catch(error => {
                console.error('Scanner loading failed:', error);
                this.loadFallback();
            });
        },
        
        // Detect which modules are needed based on page content
        detectRequiredModules: function() {
            const modules = ['core']; // Always need core
            
            // Check for scanner forms
            const hasForms = document.querySelector('form input[type="url"], form input[placeholder*="website"], form input[placeholder*="hemsida"], form[data-scan-form="true"]');
            if (hasForms) {
                modules.push('ui');
            }
            
            // Check for tracking requirements
            const hasTracking = window.dataLayer || document.querySelector('[data-partner-id]') || window.location.search.includes('utm_');
            if (hasTracking) {
                modules.push('tracking');
            }
            
            // Check if external resources are needed
            const needsResources = !window.jQuery || !window.lintrk || !window.acsb;
            if (needsResources) {
                modules.push('resources');
            }
            
            return modules;
        },
        
        // Fallback for when module loading fails
        loadFallback: function() {
            console.warn('Loading scanner fallback...');
            // Simple fallback functionality
            window.EnhancedScanner = {
                init: function() {
                    console.log('Scanner fallback active');
                    document.querySelectorAll('form').forEach(form => {
                        const urlInput = form.querySelector('input[type="url"], input[placeholder*="website"]');
                        if (urlInput && !form.getAttribute('data-fallback-enhanced')) {
                            form.setAttribute('data-fallback-enhanced', 'true');
                            form.addEventListener('submit', function(e) {
                                const domain = urlInput.value.trim();
                                if (domain) {
                                    window.open(`https://acsbace.com/?sessionid=${Date.now()}&partnerid=66f5d0180130eb9ebefb1233#audit/${domain}`, '_blank');
                                }
                                e.preventDefault();
                            });
                        }
                    });
                }
            };
            window.EnhancedScanner.init();
        }
    };
    
    // Auto-initialize based on page state
    function initializeLoader() {
        // Check if this is a relevant page
        const isRelevantPage = document.querySelector('form') || 
                              window.location.pathname.includes('/partner/') ||
                              window.location.search.includes('scanner=true') ||
                              document.querySelector('[data-scanner-page]') ||
                              document.querySelector('[data-scan-form="true"]');
        
        if (isRelevantPage) {
            window.ScannerLoader.autoLoad();
        } else {
            // Lazy load - wait for user interaction
            const lazyLoadTriggers = ['click', 'scroll', 'keydown'];
            const lazyLoad = () => {
                lazyLoadTriggers.forEach(event => {
                    document.removeEventListener(event, lazyLoad);
                });
                window.ScannerLoader.autoLoad();
            };
            
            lazyLoadTriggers.forEach(event => {
                document.addEventListener(event, lazyLoad, { once: true, passive: true });
            });
            
            // Fallback timer
            setTimeout(lazyLoad, 5000);
        }
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeLoader);
    } else {
        // Delay initialization slightly to ensure page is fully rendered
        setTimeout(initializeLoader, 100);
    }
    
    // Global utilities
    window.trackEvent = function(eventName, properties) {
        if (window.EnhancedScanner && window.EnhancedScanner.trackEvent) {
            window.EnhancedScanner.trackEvent(eventName, properties);
        } else if (window.ScannerTracking && window.ScannerTracking.trackEvent) {
            window.ScannerTracking.trackEvent(eventName, properties);
        } else if (window.dataLayer) {
            window.dataLayer.push({
                event: eventName,
                ...properties,
                scanner_version: 'enhanced_v2.1',
                timestamp: new Date().toISOString()
            });
        }
    };
    
    // Window load event for additional initialization
    window.addEventListener('load', function() {
        setTimeout(function() {
            if (window.EnhancedScanner) {
                window.EnhancedScanner.findAndEnhanceForms();
                window.EnhancedScanner.enableSubmitButtons();
                console.log('Scanner dependencies preloaded');
            }
        }, 1000);
    });
    
})();
