/**
 * Enhanced Scanner Tracking v2.1
 * Analytics, LinkedIn tracking, and conversion monitoring
 */
(function() {
    'use strict';

    window.ScannerTracking = {
        config: {
            linkedInPartnerId: "8412577",
            searchAtlasUuid: "ab3d6ac8-4a01-472e-9ade-47b405ee9b48",
            gtmId: "GTM-PQBPSGHR",
            facebookPixelId: "2338252559865448"
        },

        resourceStatus: {
            linkedin: { loaded: false, blocked: false },
            searchatlas: { loaded: false, blocked: false },
            gtm: { loaded: false, blocked: false },
            facebook: { loaded: false, blocked: false }
        },

        conversionMappings: {
            contact_click: { value: 25, conversionId: "contact_click" },
            demo_click: { value: 30, conversionId: "demo_click" },
            scanner_click: { value: 40, conversionId: "scanner_click" },
            form_submit: { value: 50, conversionId: "form_submit" },
            scanner_complete: { value: 100, conversionId: "scanner_complete" }
        },

        init: function() {
            console.log("Scanner Tracking v2.1 initializing...");

            if (window._scannerTrackingInitialized) {
                console.log("Scanner tracking already initialized");
                return;
            }
            window._scannerTrackingInitialized = true;

            this.setupLinkedInTracking();
            this.setupSearchAtlas();
            this.setupClickTracking();
            this.setupFormTracking();
            this.setupPageViewTracking();

            console.log("Scanner Tracking initialized successfully");
        },

        // LinkedIn Insight Tag Setup
        setupLinkedInTracking: function() {
            if (window.lintrk || window._linkedInLoading) return;

            window._linkedInLoading = true;
            window.lintrk = function(a, b) { window.lintrk.q.push([a, b]); };
            window.lintrk.q = [];

            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.src = 'https://snap.licdn.com/li.lms-analytics/insight.min.js';

            script.addEventListener('load', () => {
                this.resourceStatus.linkedin.loaded = true;
                window._linkedInLoading = false;
                console.log("LinkedIn Insight Tag loaded successfully");

                // Set partner ID
                window._linkedin_partner_id = this.config.linkedInPartnerId;
                window._linkedin_data_partner_ids = window._linkedin_data_partner_ids || [];
                window._linkedin_data_partner_ids.push(this.config.linkedInPartnerId);

                // Track initial page view
                this.trackLinkedInConversion('page_view', 1);
            });

            script.addEventListener('error', () => {
                this.resourceStatus.linkedin.blocked = true;
                window._linkedInLoading = false;
                console.warn("LinkedIn Insight Tag blocked or failed to load");
            });

            const firstScript = document.getElementsByTagName('script')[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        },

        // SearchAtlas Setup
        setupSearchAtlas: function() {
            if (document.getElementById("sa-dynamic-optimization-loader")) return;

            try {
                const script = document.createElement("script");
                script.setAttribute("nowprocket", "");
                script.setAttribute("nitro-exclude", "");
                script.src = "https://dashboard.searchatlas.com/scripts/dynamic_optimization.js";
                script.dataset.uuid = this.config.searchAtlasUuid;
                script.id = "sa-dynamic-optimization-loader";

                script.addEventListener("error", () => {
                    this.resourceStatus.searchatlas.blocked = true;
                    console.warn("SearchAtlas script blocked or failed to load");
                });

                script.addEventListener("load", () => {
                    this.resourceStatus.searchatlas.loaded = true;
                    console.log("SearchAtlas script loaded successfully");
                });

                document.head.appendChild(script);
            } catch (error) {
                this.resourceStatus.searchatlas.blocked = true;
                console.error("Error loading SearchAtlas script:", error);
            }
        },

        // Click Tracking Setup
        setupClickTracking: function() {
            document.addEventListener('click', (e) => {
                const target = e.target;
                const text = target.textContent ? target.textContent.toLowerCase() : "";
                const className = target.className ? target.className.toLowerCase() : "";
                const id = target.id ? target.id.toLowerCase() : "";
                const href = target.href ? target.href.toLowerCase() : "";

                // Contact-related clicks
                if (this.isContactClick(text, className, id, href)) {
                    this.trackConversion('contact_click', {
                        element_text: text.substring(0, 50),
                        element_id: id,
                        element_class: className.substring(0, 50),
                        page_url: window.location.href
                    });
                }

                // Demo/booking clicks
                else if (this.isDemoClick(text, className, id, href)) {
                    this.trackConversion('demo_click', {
                        element_text: text.substring(0, 50),
                        element_id: id,
                        element_class: className.substring(0, 50),
                        page_url: window.location.href
                    });
                }

                // Scanner-related clicks
                else if (this.isScannerClick(text, className, id, href)) {
                    this.trackConversion('scanner_click', {
                        element_text: text.substring(0, 50),
                        element_id: id,
                        element_class: className.substring(0, 50),
                        page_url: window.location.href
                    });
                }

                // External link tracking
                else if (target.href && this.isExternalLink(target.href)) {
                    this.trackEvent('external_link_click', {
                        destination_url: target.href,
                        link_text: text.substring(0, 100),
                        page_url: window.location.href
                    });
                }
            }, true);
        },

        isContactClick: function(text, className, id, href) {
            const contactPatterns = [
                'kontakta', 'contact', 'kontakt', 'ring', 'call', 'telefon', 'phone',
                'email', 'mejl', 'mail', 'support', 'hjälp', 'help'
            ];

            return contactPatterns.some(pattern =>
                text.includes(pattern) ||
                className.includes(pattern) ||
                id.includes(pattern) ||
                href.includes(pattern)
            );
        },

        isDemoClick: function(text, className, id, href) {
            const demoPatterns = [
                'demo', 'boka', 'book', 'prova', 'try', 'test', 'gratis',
                'free', 'möte', 'meeting', 'presentation', 'visa'
            ];

            return demoPatterns.some(pattern =>
                text.includes(pattern) ||
                className.includes(pattern) ||
                id.includes(pattern) ||
                href.includes(pattern)
            );
        },

        isScannerClick: function(text, className, id, href) {
            const scannerPatterns = [
                'scanna', 'scan', 'testa', 'test', 'audit', 'granska',
                'check', 'kolla', 'tillgänglighet', 'accessibility', 'wcag'
            ];

            return scannerPatterns.some(pattern =>
                text.includes(pattern) ||
                className.includes(pattern) ||
                id.includes(pattern) ||
                href.includes(pattern)
            );
        },

        isExternalLink: function(href) {
            try {
                const url = new URL(href);
                return url.hostname !== window.location.hostname &&
                       !url.hostname.includes('selma.se');
            } catch (error) {
                return false;
            }
        },

        // Form Tracking Setup
        setupFormTracking: function() {
            document.addEventListener('submit', (e) => {
                const form = e.target;

                // Skip enhanced scanner forms (handled by core)
                if (form.getAttribute('data-scanner-enhanced') === 'true') return;

                // Track other forms
                const formData = this.extractFormData(form);

                this.trackConversion('form_submit', {
                    form_id: form.id || 'unnamed',
                    form_action: form.action || window.location.href,
                    form_method: form.method || 'get',
                    has_email: !!formData.email,
                    has_phone: !!formData.phone,
                    field_count: Object.keys(formData).length,
                    page_url: window.location.href
                });

                // Add partner data if applicable
                if (window.EnhancedScanner && window.EnhancedScanner.partnerId) {
                    this.addPartnerDataToForm(form);
                }
            });
        },

        extractFormData: function(form) {
            const data = {};
            const formData = new FormData(form);

            for (let [key, value] of formData.entries()) {
                if (key.toLowerCase().includes('email') && value) {
                    data.email = 'provided';
                } else if (key.toLowerCase().includes('phone') && value) {
                    data.phone = 'provided';
                } else if (key.toLowerCase().includes('name') && value) {
                    data.name = 'provided';
                } else if (value && value.length > 0) {
                    data[key] = 'provided';
                }
            }

            return data;
        },

        addPartnerDataToForm: function(form) {
            if (!window.EnhancedScanner || !window.EnhancedScanner.partnerId) return;

            const fields = [
                { name: 'partner_id', value: window.EnhancedScanner.partnerId },
                { name: 'partner_session', value: window.EnhancedScanner.sessionId || '' },
                { name: 'scanner_version', value: 'enhanced_v2.1' },
                { name: 'traffic_source', value: window.EnhancedScanner.session?.trafficSource?.source || 'direct' },
                { name: 'traffic_medium', value: window.EnhancedScanner.session?.trafficSource?.medium || 'direct' }
            ];

            fields.forEach(field => {
                if (!form.querySelector(`input[name="${field.name}"]`)) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = field.name;
                    input.value = field.value;
                    form.appendChild(input);
                }
            });
        },

        // Page View Tracking
        setupPageViewTracking: function() {
            // Track page view with partner information
            const pageViewData = {
                page_url: window.location.href,
                page_title: document.title,
                referrer: document.referrer || 'direct',
                user_agent: navigator.userAgent.substring(0, 200),
                screen_resolution: `${screen.width}x${screen.height}`,
                viewport_size: `${window.innerWidth}x${window.innerHeight}`,
                timestamp: new Date().toISOString()
            };

            // Add partner data if available
            if (window.EnhancedScanner) {
                pageViewData.partner_id = window.EnhancedScanner.partnerId || null;
                pageViewData.traffic_source = window.EnhancedScanner.session?.trafficSource?.source || 'direct';
                pageViewData.traffic_medium = window.EnhancedScanner.session?.trafficSource?.medium || 'direct';
                pageViewData.utm_campaign = window.EnhancedScanner.session?.trafficSource?.utmParams?.utm_campaign || null;
            }

            this.trackEvent('enhanced_page_view', pageViewData);

            // Track time on page
            let startTime = Date.now();
            let maxTime = 0;

            const trackTimeOnPage = () => {
                const timeOnPage = Math.round((Date.now() - startTime) / 1000);
                if (timeOnPage > maxTime) {
                    maxTime = timeOnPage;
                }
            };

            // Track every 30 seconds
            const timeInterval = setInterval(trackTimeOnPage, 30000);

            // Track on page unload
            window.addEventListener('beforeunload', () => {
                clearInterval(timeInterval);
                trackTimeOnPage();

                if (maxTime > 10) { // Only track if user spent more than 10 seconds
                    this.trackEvent('time_on_page', {
                        duration_seconds: maxTime,
                        page_url: window.location.href,
                        engaged_time: maxTime > 30 ? 'high' : maxTime > 10 ? 'medium' : 'low'
                    });
                }
            });
        },

        // Conversion Tracking
        trackConversion: function(conversionType, additionalData = {}) {
            const mapping = this.conversionMappings[conversionType];
            if (!mapping) {
                console.warn("Unknown conversion type:", conversionType);
                return;
            }

            // Track with LinkedIn
            this.trackLinkedInConversion(mapping.conversionId, mapping.value);

            // Track with GTM
            this.trackEvent(`conversion_${conversionType}`, {
                conversion_type: conversionType,
                conversion_value: mapping.value,
                conversion_id: mapping.conversionId,
                ...additionalData
            });

            console.log("Conversion tracked:", conversionType, "Value:", mapping.value);
        },

        // LinkedIn Conversion Tracking
        trackLinkedInConversion: function(conversionId, value) {
            if (!this.checkConsent()) {
                console.log("LinkedIn tracking disabled - no user consent");
                return;
            }

            if (this.resourceStatus.linkedin.loaded && window.lintrk) {
                try {
                    window.lintrk("track", {
                        conversion_id: conversionId,
                        conversion_value: value || 1
                    });
                    console.log("LinkedIn conversion tracked:", conversionId, "Value:", value);
                } catch (error) {
                    console.error("LinkedIn tracking error:", error);
                }
            } else if (this.resourceStatus.linkedin.blocked) {
                console.log("LinkedIn tracking blocked by user/browser");
            } else {
                console.log("LinkedIn not yet loaded, queuing conversion");
                // Queue for when LinkedIn loads
                setTimeout(() => this.trackLinkedInConversion(conversionId, value), 2000);
            }
        },

        // Event Tracking
        trackEvent: function(eventName, properties = {}) {
            const eventData = {
                ...properties,
                scanner_version: 'enhanced_v2.1',
                timestamp: new Date().toISOString(),
                session_id: this.generateSessionId()
            };

            // Add partner information if available
            if (window.EnhancedScanner) {
                eventData.partner_id = window.EnhancedScanner.partnerId || null;
                eventData.traffic_source = window.EnhancedScanner.session?.trafficSource?.source || 'direct';
                eventData.traffic_medium = window.EnhancedScanner.session?.trafficSource?.medium || 'direct';
            }

            // Send to GTM/dataLayer
            if (window.dataLayer) {
                window.dataLayer.push({
                    event: eventName,
                    ...eventData
                });
            }

            // Send to Facebook Pixel if available
            if (window.fbq && this.checkConsent()) {
                // New logic from the complete script
                if (eventName === "enhanced_scanner_submit_v3_5") {
                    window.fbq("track", "InitiateCheckout", {
                        content_name: "Accessibility Scan",
                        content_category: "Scanner",
                        value: 0,
                        currency: "SEK"
                    });
                } else if (eventName === "scanner_lead_complete") {
                    window.fbq("track", "Lead", {
                        content_name: "Scanner Lead",
                        content_category: "Accessibility",
                        value: 100,
                        currency: "SEK"
                    });
                } else {
                    window.fbq('trackCustom', eventName, eventData);
                }
            }

            console.log("Event tracked:", eventName, eventData);
        },

        // Consent Management
        checkConsent: function() {
            try {
                // Check various consent mechanisms
                const consent = localStorage.getItem("cookieConsent") ||
                               localStorage.getItem("cookie-consent") ||
                               localStorage.getItem("gdpr-consent");

                // Check Google Consent Mode
                if (window.gtag && typeof window.gtag === 'function') {
                    return true; // Assume consent given if GTM is loaded
                }

                // Check explicit consent values
                return consent === "accepted" || consent === "true" || consent === "1";
            } catch (error) {
                console.warn("Consent check failed:", error);
                return false; // Default to no consent
            }
        },

        // Enhanced GTM Integration
        setupGTMIntegration: function() {
            // Enhanced ecommerce for scanner completions
            window.addEventListener('scanner_completion', (event) => {
                if (window.dataLayer && event.detail) {
                    window.dataLayer.push({
                        event: 'enhanced_ecommerce',
                        ecommerce: {
                            purchase: {
                                transaction_id: event.detail.session_id,
                                value: 0, // Lead generation, no direct value
                                currency: 'SEK',
                                items: [{
                                    item_id: 'accessibility_scan',
                                    item_name: 'Website Accessibility Scan',
                                    category: 'Lead Generation',
                                    quantity: 1,
                                    price: 0
                                }]
                            }
                        },
                        scanner_version: 'enhanced_v2.1'
                    });
                }
            });
        },

        // Utility Functions
        generateSessionId: function() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        },

        // Public API for external tracking
        track: function(eventName, properties = {}) {
            this.trackEvent(eventName, properties);
        },

        trackConversionByName: function(conversionName, value) {
            if (this.conversionMappings[conversionName]) {
                this.trackConversion(conversionName, { custom_value: value });
            } else {
                this.trackLinkedInConversion(conversionName, value);
            }
        },

        // Scanner-specific tracking integration
        onScannerEvent: function(eventType, data) {
            switch (eventType) {
                case 'scan_initiated':
                    this.trackConversion('scanner_click', {
                        domain: data.domain,
                        form_type: data.formType
                    });
                    break;

                case 'scan_completed':
                    this.trackConversion('scanner_complete', {
                        domain: data.domain,
                        has_contact: !!data.contactInfo?.email,
                        report_id: data.reportId
                    });
                    break;

                case 'contact_provided':
                    this.trackConversion('form_submit', {
                        domain: data.domain,
                        lead_quality: data.hasPhone ? 'high' : 'medium'
                    });
                    break;

                default:
                    this.trackEvent(`scanner_${eventType}`, data);
            }
        }
    };

    // Auto-initialize
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.ScannerTracking.init();
        });
    } else {
        window.ScannerTracking.init();
    }

    // Integrate with Enhanced Scanner if available
    if (window.EnhancedScanner) {
        window.EnhancedScanner.trackEvent = window.ScannerTracking.trackEvent.bind(window.ScannerTracking);
    }

})();
